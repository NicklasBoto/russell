-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Stm                                 (0)
	Stm -> type "::=" TypeDef                          (1)
	Stm -> ident ":" Type                              (2)
	Stm -> ident ":" "?"                               (3)
	Stm -> ident ":=" Exp                              (4)
	Stm -> ident ":=" "{" Exps "}"                     (5)
	Stm -> class type ident "{" "}"                    (6)
	Stm -> export type "{" "}"                         (7)
	Stm -> export "{" "}"                              (8)
	Stm -> instance type type "{" "}"                  (9)
	Stm -> Exp                                         (10)
	Exp -> pattern "{" Pattern "}"                     (11)
	Exp -> "(" Exp ")"                                 (12)
	Exp -> Exp binop Exp                               (13)
	Exp -> ident "<-" Exp                              (14)
	Exp -> ident                                       (15)
	Exp -> "λ" ident "->" Exp                          (16)
	Exp -> Const                                       (17)
	Exp -> ident "(" Args ")"                          (18)
	Exp -> case Exp "{" Case "}"                       (19)
	Exp -> hole                                        (20)
	Args ->                                            (21)
	Args -> Exp                                        (22)
	Args -> Args "," Exp                               (23)
	Case -> Case1                                      (24)
	Case -> Case Case1                                 (25)
	Case1 -> Exp "=>" Exp ";"                          (26)
	Pattern -> Pattern1                                (27)
	Pattern -> Pattern Pattern1                        (28)
	Pattern1 -> Const "=>" Exp ";"                     (29)
	Const -> int                                       (30)
	Const -> str                                       (31)
	Const -> chr                                       (32)
	Exps -> Exp1                                       (33)
	Exps -> Exps Exp1                                  (34)
	Exp1 -> Exp ";"                                    (35)
	TypeDef -> type                                    (36)
	TypeDef -> TypeDef "|" type                        (37)
	Type -> type                                       (38)
	Type -> Type "->" type                             (39)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"->"           { TokenArrow }
	"=>"           { TokenDoubleArrow }
	"<-"           { TokenLeftArrow }
	"::="          { TokenData }
	"|"            { TokenPipe }
	":"            { TokenTypeSign }
	";"            { TokenSemi }
	","            { TokenComma }
	"λ"            { TokenLambda }
	str            { TokenString $$ }
	chr            { TokenChar   $$ }
	":="           { TokenAssign }
	"("            { TokenLParen }
	")"            { TokenRParen }
	"{"            { TokenLBracket }
	"}"            { TokenRBracket }
	"?"            { TokenQMark }
	ident          { TokenIdent $$ }
	int            { TokenInt   $$ }
	type           { TokenType  $$ }
	hole           { TokenHole  $$ }
	pattern        { Builtin "pattern" }
	case           { Builtin "case" }
	export         { Builtin "export" }
	instance       { Builtin "instance" }
	class          { Builtin "class" }
	binop          { BinOp $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Stm             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
	Exp             rules 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
	Args            rules 21, 22, 23
	Case            rules 24, 25
	Case1           rule  26
	Pattern         rules 27, 28
	Pattern1        rule  29
	Const           rules 30, 31, 32
	Exps            rules 33, 34
	Exp1            rule  35
	TypeDef         rules 36, 37
	Type            rules 38, 39

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Stm                                (rule 0)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 10
	int            shift, and enter state 11
	type           shift, and enter state 2
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14
	export         shift, and enter state 15
	instance       shift, and enter state 16
	class          shift, and enter state 17

	Stm            goto state 3
	Exp            goto state 4
	Const          goto state 5

State 1

	Stm -> . type "::=" TypeDef                         (rule 1)

	type           shift, and enter state 2


State 2

	Stm -> type . "::=" TypeDef                         (rule 1)

	"::="          shift, and enter state 32


State 3

	%start_calc -> Stm .                                (rule 0)

	%eof           accept


State 4

	Stm -> Exp .                                        (rule 10)
	Exp -> Exp . binop Exp                              (rule 13)

	binop          shift, and enter state 31
	%eof           reduce using rule 10


State 5

	Exp -> Const .                                      (rule 17)

	"=>"           reduce using rule 17
	";"            reduce using rule 17
	","            reduce using rule 17
	")"            reduce using rule 17
	"{"            reduce using rule 17
	binop          reduce using rule 17
	%eof           reduce using rule 17


State 6

	Exp -> "λ" . ident "->" Exp                         (rule 16)

	ident          shift, and enter state 30


State 7

	Const -> str .                                      (rule 31)

	"=>"           reduce using rule 31
	";"            reduce using rule 31
	","            reduce using rule 31
	")"            reduce using rule 31
	"{"            reduce using rule 31
	binop          reduce using rule 31
	%eof           reduce using rule 31


State 8

	Const -> chr .                                      (rule 32)

	"=>"           reduce using rule 32
	";"            reduce using rule 32
	","            reduce using rule 32
	")"            reduce using rule 32
	"{"            reduce using rule 32
	binop          reduce using rule 32
	%eof           reduce using rule 32


State 9

	Exp -> "(" . Exp ")"                                (rule 12)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 29
	Const          goto state 5

State 10

	Stm -> ident . ":" Type                             (rule 2)
	Stm -> ident . ":" "?"                              (rule 3)
	Stm -> ident . ":=" Exp                             (rule 4)
	Stm -> ident . ":=" "{" Exps "}"                    (rule 5)
	Exp -> ident . "<-" Exp                             (rule 14)
	Exp -> ident .                                      (rule 15)
	Exp -> ident . "(" Args ")"                         (rule 18)

	"<-"           shift, and enter state 25
	":"            shift, and enter state 26
	":="           shift, and enter state 27
	"("            shift, and enter state 28
	binop          reduce using rule 15
	%eof           reduce using rule 15


State 11

	Const -> int .                                      (rule 30)

	"=>"           reduce using rule 30
	";"            reduce using rule 30
	","            reduce using rule 30
	")"            reduce using rule 30
	"{"            reduce using rule 30
	binop          reduce using rule 30
	%eof           reduce using rule 30


State 12

	Exp -> hole .                                       (rule 20)

	"=>"           reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20
	")"            reduce using rule 20
	"{"            reduce using rule 20
	binop          reduce using rule 20
	%eof           reduce using rule 20


State 13

	Exp -> pattern . "{" Pattern "}"                    (rule 11)

	"{"            shift, and enter state 24


State 14

	Exp -> case . Exp "{" Case "}"                      (rule 19)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 22
	Const          goto state 5

State 15

	Stm -> export . type "{" "}"                        (rule 7)
	Stm -> export . "{" "}"                             (rule 8)

	"{"            shift, and enter state 20
	type           shift, and enter state 21


State 16

	Stm -> instance . type type "{" "}"                 (rule 9)

	type           shift, and enter state 19


State 17

	Stm -> class . type ident "{" "}"                   (rule 6)

	type           shift, and enter state 18


State 18

	Stm -> class type . ident "{" "}"                   (rule 6)

	ident          shift, and enter state 53


State 19

	Stm -> instance type . type "{" "}"                 (rule 9)

	type           shift, and enter state 52


State 20

	Stm -> export "{" . "}"                             (rule 8)

	"}"            shift, and enter state 51


State 21

	Stm -> export type . "{" "}"                        (rule 7)

	"{"            shift, and enter state 50


State 22

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> case Exp . "{" Case "}"                      (rule 19)

	"{"            shift, and enter state 49
	binop          shift, and enter state 31


State 23

	Exp -> ident . "<-" Exp                             (rule 14)
	Exp -> ident .                                      (rule 15)
	Exp -> ident . "(" Args ")"                         (rule 18)

	"=>"           reduce using rule 15
	"<-"           shift, and enter state 25
	";"            reduce using rule 15
	","            reduce using rule 15
	"("            shift, and enter state 28
	")"            reduce using rule 15
	"{"            reduce using rule 15
	binop          reduce using rule 15
	%eof           reduce using rule 15


State 24

	Exp -> pattern "{" . Pattern "}"                    (rule 11)

	str            shift, and enter state 7
	chr            shift, and enter state 8
	int            shift, and enter state 11

	Pattern        goto state 46
	Pattern1       goto state 47
	Const          goto state 48

State 25

	Exp -> ident "<-" . Exp                             (rule 14)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 45
	Const          goto state 5

State 26

	Stm -> ident ":" . Type                             (rule 2)
	Stm -> ident ":" . "?"                              (rule 3)

	"?"            shift, and enter state 43
	type           shift, and enter state 44

	Type           goto state 42

State 27

	Stm -> ident ":=" . Exp                             (rule 4)
	Stm -> ident ":=" . "{" Exps "}"                    (rule 5)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	"{"            shift, and enter state 41
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 40
	Const          goto state 5

State 28

	Exp -> ident "(" . Args ")"                         (rule 18)

	","            reduce using rule 21
	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	")"            reduce using rule 21
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 38
	Args           goto state 39
	Const          goto state 5

State 29

	Exp -> "(" Exp . ")"                                (rule 12)
	Exp -> Exp . binop Exp                              (rule 13)

	")"            shift, and enter state 37
	binop          shift, and enter state 31


State 30

	Exp -> "λ" ident . "->" Exp                         (rule 16)

	"->"           shift, and enter state 36


State 31

	Exp -> Exp binop . Exp                              (rule 13)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 35
	Const          goto state 5

State 32

	Stm -> type "::=" . TypeDef                         (rule 1)

	type           shift, and enter state 34

	TypeDef        goto state 33

State 33

	Stm -> type "::=" TypeDef .                         (rule 1)
	TypeDef -> TypeDef . "|" type                       (rule 37)

	"|"            shift, and enter state 70
	%eof           reduce using rule 1


State 34

	TypeDef -> type .                                   (rule 36)

	"|"            reduce using rule 36
	%eof           reduce using rule 36


State 35

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> Exp binop Exp .                              (rule 13)

	"=>"           reduce using rule 13
	";"            reduce using rule 13
	","            reduce using rule 13
	")"            reduce using rule 13
	"{"            reduce using rule 13
	binop          reduce using rule 13
	%eof           reduce using rule 13


State 36

	Exp -> "λ" ident "->" . Exp                         (rule 16)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 69
	Const          goto state 5

State 37

	Exp -> "(" Exp ")" .                                (rule 12)

	"=>"           reduce using rule 12
	";"            reduce using rule 12
	","            reduce using rule 12
	")"            reduce using rule 12
	"{"            reduce using rule 12
	binop          reduce using rule 12
	%eof           reduce using rule 12


State 38

	Exp -> Exp . binop Exp                              (rule 13)
	Args -> Exp .                                       (rule 22)

	","            reduce using rule 22
	")"            reduce using rule 22
	binop          shift, and enter state 31


State 39

	Exp -> ident "(" Args . ")"                         (rule 18)
	Args -> Args . "," Exp                              (rule 23)

	","            shift, and enter state 67
	")"            shift, and enter state 68


State 40

	Stm -> ident ":=" Exp .                             (rule 4)
	Exp -> Exp . binop Exp                              (rule 13)

	binop          shift, and enter state 31
	%eof           reduce using rule 4


State 41

	Stm -> ident ":=" "{" . Exps "}"                    (rule 5)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 64
	Const          goto state 5
	Exps           goto state 65
	Exp1           goto state 66

State 42

	Stm -> ident ":" Type .                             (rule 2)
	Type -> Type . "->" type                            (rule 39)

	"->"           shift, and enter state 63
	%eof           reduce using rule 2


State 43

	Stm -> ident ":" "?" .                              (rule 3)

	%eof           reduce using rule 3


State 44

	Type -> type .                                      (rule 38)

	"->"           reduce using rule 38
	%eof           reduce using rule 38


State 45

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> ident "<-" Exp .                             (rule 14)

	"=>"           reduce using rule 14
	";"            reduce using rule 14
	","            reduce using rule 14
	")"            reduce using rule 14
	"{"            reduce using rule 14
	binop          shift, and enter state 31
	%eof           reduce using rule 14


State 46

	Exp -> pattern "{" Pattern . "}"                    (rule 11)
	Pattern -> Pattern . Pattern1                       (rule 28)

	str            shift, and enter state 7
	chr            shift, and enter state 8
	"}"            shift, and enter state 62
	int            shift, and enter state 11

	Pattern1       goto state 61
	Const          goto state 48

State 47

	Pattern -> Pattern1 .                               (rule 27)

	str            reduce using rule 27
	chr            reduce using rule 27
	"}"            reduce using rule 27
	int            reduce using rule 27


State 48

	Pattern1 -> Const . "=>" Exp ";"                    (rule 29)

	"=>"           shift, and enter state 60


State 49

	Exp -> case Exp "{" . Case "}"                      (rule 19)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 57
	Case           goto state 58
	Case1          goto state 59
	Const          goto state 5

State 50

	Stm -> export type "{" . "}"                        (rule 7)

	"}"            shift, and enter state 56


State 51

	Stm -> export "{" "}" .                             (rule 8)

	%eof           reduce using rule 8


State 52

	Stm -> instance type type . "{" "}"                 (rule 9)

	"{"            shift, and enter state 55


State 53

	Stm -> class type ident . "{" "}"                   (rule 6)

	"{"            shift, and enter state 54


State 54

	Stm -> class type ident "{" . "}"                   (rule 6)

	"}"            shift, and enter state 82


State 55

	Stm -> instance type type "{" . "}"                 (rule 9)

	"}"            shift, and enter state 81


State 56

	Stm -> export type "{" "}" .                        (rule 7)

	%eof           reduce using rule 7


State 57

	Exp -> Exp . binop Exp                              (rule 13)
	Case1 -> Exp . "=>" Exp ";"                         (rule 26)

	"=>"           shift, and enter state 80
	binop          shift, and enter state 31


State 58

	Exp -> case Exp "{" Case . "}"                      (rule 19)
	Case -> Case . Case1                                (rule 25)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	"}"            shift, and enter state 79
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 57
	Case1          goto state 78
	Const          goto state 5

State 59

	Case -> Case1 .                                     (rule 24)

	"λ"            reduce using rule 24
	str            reduce using rule 24
	chr            reduce using rule 24
	"("            reduce using rule 24
	"}"            reduce using rule 24
	ident          reduce using rule 24
	int            reduce using rule 24
	hole           reduce using rule 24
	pattern        reduce using rule 24
	case           reduce using rule 24


State 60

	Pattern1 -> Const "=>" . Exp ";"                    (rule 29)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 77
	Const          goto state 5

State 61

	Pattern -> Pattern Pattern1 .                       (rule 28)

	str            reduce using rule 28
	chr            reduce using rule 28
	"}"            reduce using rule 28
	int            reduce using rule 28


State 62

	Exp -> pattern "{" Pattern "}" .                    (rule 11)

	"=>"           reduce using rule 11
	";"            reduce using rule 11
	","            reduce using rule 11
	")"            reduce using rule 11
	"{"            reduce using rule 11
	binop          reduce using rule 11
	%eof           reduce using rule 11


State 63

	Type -> Type "->" . type                            (rule 39)

	type           shift, and enter state 76


State 64

	Exp -> Exp . binop Exp                              (rule 13)
	Exp1 -> Exp . ";"                                   (rule 35)

	";"            shift, and enter state 75
	binop          shift, and enter state 31


State 65

	Stm -> ident ":=" "{" Exps . "}"                    (rule 5)
	Exps -> Exps . Exp1                                 (rule 34)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	"}"            shift, and enter state 74
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 64
	Const          goto state 5
	Exp1           goto state 73

State 66

	Exps -> Exp1 .                                      (rule 33)

	"λ"            reduce using rule 33
	str            reduce using rule 33
	chr            reduce using rule 33
	"("            reduce using rule 33
	"}"            reduce using rule 33
	ident          reduce using rule 33
	int            reduce using rule 33
	hole           reduce using rule 33
	pattern        reduce using rule 33
	case           reduce using rule 33


State 67

	Args -> Args "," . Exp                              (rule 23)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 72
	Const          goto state 5

State 68

	Exp -> ident "(" Args ")" .                         (rule 18)

	"=>"           reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18
	")"            reduce using rule 18
	"{"            reduce using rule 18
	binop          reduce using rule 18
	%eof           reduce using rule 18


State 69

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> "λ" ident "->" Exp .                         (rule 16)

	"=>"           reduce using rule 16
	";"            reduce using rule 16
	","            reduce using rule 16
	")"            reduce using rule 16
	"{"            reduce using rule 16
	binop          shift, and enter state 31
	%eof           reduce using rule 16


State 70

	TypeDef -> TypeDef "|" . type                       (rule 37)

	type           shift, and enter state 71


State 71

	TypeDef -> TypeDef "|" type .                       (rule 37)

	"|"            reduce using rule 37
	%eof           reduce using rule 37


State 72

	Exp -> Exp . binop Exp                              (rule 13)
	Args -> Args "," Exp .                              (rule 23)

	","            reduce using rule 23
	")"            reduce using rule 23
	binop          shift, and enter state 31


State 73

	Exps -> Exps Exp1 .                                 (rule 34)

	"λ"            reduce using rule 34
	str            reduce using rule 34
	chr            reduce using rule 34
	"("            reduce using rule 34
	"}"            reduce using rule 34
	ident          reduce using rule 34
	int            reduce using rule 34
	hole           reduce using rule 34
	pattern        reduce using rule 34
	case           reduce using rule 34


State 74

	Stm -> ident ":=" "{" Exps "}" .                    (rule 5)

	%eof           reduce using rule 5


State 75

	Exp1 -> Exp ";" .                                   (rule 35)

	"λ"            reduce using rule 35
	str            reduce using rule 35
	chr            reduce using rule 35
	"("            reduce using rule 35
	"}"            reduce using rule 35
	ident          reduce using rule 35
	int            reduce using rule 35
	hole           reduce using rule 35
	pattern        reduce using rule 35
	case           reduce using rule 35


State 76

	Type -> Type "->" type .                            (rule 39)

	"->"           reduce using rule 39
	%eof           reduce using rule 39


State 77

	Exp -> Exp . binop Exp                              (rule 13)
	Pattern1 -> Const "=>" Exp . ";"                    (rule 29)

	";"            shift, and enter state 84
	binop          shift, and enter state 31


State 78

	Case -> Case Case1 .                                (rule 25)

	"λ"            reduce using rule 25
	str            reduce using rule 25
	chr            reduce using rule 25
	"("            reduce using rule 25
	"}"            reduce using rule 25
	ident          reduce using rule 25
	int            reduce using rule 25
	hole           reduce using rule 25
	pattern        reduce using rule 25
	case           reduce using rule 25


State 79

	Exp -> case Exp "{" Case "}" .                      (rule 19)

	"=>"           reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19
	")"            reduce using rule 19
	"{"            reduce using rule 19
	binop          reduce using rule 19
	%eof           reduce using rule 19


State 80

	Case1 -> Exp "=>" . Exp ";"                         (rule 26)

	"λ"            shift, and enter state 6
	str            shift, and enter state 7
	chr            shift, and enter state 8
	"("            shift, and enter state 9
	ident          shift, and enter state 23
	int            shift, and enter state 11
	hole           shift, and enter state 12
	pattern        shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 83
	Const          goto state 5

State 81

	Stm -> instance type type "{" "}" .                 (rule 9)

	%eof           reduce using rule 9


State 82

	Stm -> class type ident "{" "}" .                   (rule 6)

	%eof           reduce using rule 6


State 83

	Exp -> Exp . binop Exp                              (rule 13)
	Case1 -> Exp "=>" Exp . ";"                         (rule 26)

	";"            shift, and enter state 85
	binop          shift, and enter state 31


State 84

	Pattern1 -> Const "=>" Exp ";" .                    (rule 29)

	str            reduce using rule 29
	chr            reduce using rule 29
	"}"            reduce using rule 29
	int            reduce using rule 29


State 85

	Case1 -> Exp "=>" Exp ";" .                         (rule 26)

	"λ"            reduce using rule 26
	str            reduce using rule 26
	chr            reduce using rule 26
	"("            reduce using rule 26
	"}"            reduce using rule 26
	ident          reduce using rule 26
	int            reduce using rule 26
	hole           reduce using rule 26
	pattern        reduce using rule 26
	case           reduce using rule 26


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 40
Number of terminals: 27
Number of non-terminals: 13
Number of states: 86
