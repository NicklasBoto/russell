-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from grammar.y
-----------------------------------------------------------------------------


rule 14 is unused
rule 15 is unused

terminal case is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Stm                                 (0)
	Stm -> type "::=" TypeDef                          (1)
	Stm -> ident ":" Type                              (2)
	Stm -> ident ":" "?"                               (3)
	Stm -> ident ":=" Exp                              (4)
	Stm -> class type ident "{" "}"                    (5)
	Stm -> export type "{" "}"                         (6)
	Stm -> export "{" "}"                              (7)
	Stm -> instance type type "{" "}"                  (8)
	Exp -> pattern "{" Exp "}"                         (9)
	Exp -> "(" Exp ")"                                 (10)
	Exp -> Exp ";"                                     (11)
	Exp -> int                                         (12)
	Exp -> ident                                       (13)
	TypeArgs ->                                        (14)
	TypeArgs -> TypeArgs ident                         (15)
	TypeDef -> type                                    (16)
	TypeDef -> TypeDef "|" type                        (17)
	Type -> type                                       (18)
	Type -> Type "->" type                             (19)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"->"           { TokenArrow }
	"::="          { TokenData }
	"|"            { TokenPipe }
	":"            { TokenTypeSign }
	";"            { TokenSemi }
	":="           { TokenAssign }
	"("            { TokenLParen }
	")"            { TokenRParen }
	"{"            { TokenLBracket }
	"}"            { TokenRBracket }
	"?"            { TokenQMark }
	ident          { TokenIdent $$ }
	int            { TokenInt   $$ }
	type           { TokenType  $$ }
	pattern        { Builtin "pattern" }
	case           { Builtin "case" }
	export         { Builtin "export" }
	instance       { Builtin "instance" }
	class          { Builtin "class" }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Stm             rules 1, 2, 3, 4, 5, 6, 7, 8
	Exp             rules 9, 10, 11, 12, 13
	TypeArgs        rules 14, 15
	TypeDef         rules 16, 17
	Type            rules 18, 19

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Stm                                (rule 0)

	ident          shift, and enter state 4
	type           shift, and enter state 2
	export         shift, and enter state 5
	instance       shift, and enter state 6
	class          shift, and enter state 7

	Stm            goto state 3

State 1

	Stm -> . type "::=" TypeDef                         (rule 1)

	type           shift, and enter state 2


State 2

	Stm -> type . "::=" TypeDef                         (rule 1)

	"::="          shift, and enter state 14


State 3

	%start_calc -> Stm .                                (rule 0)

	%eof           accept


State 4

	Stm -> ident . ":" Type                             (rule 2)
	Stm -> ident . ":" "?"                              (rule 3)
	Stm -> ident . ":=" Exp                             (rule 4)

	":"            shift, and enter state 12
	":="           shift, and enter state 13


State 5

	Stm -> export . type "{" "}"                        (rule 6)
	Stm -> export . "{" "}"                             (rule 7)

	"{"            shift, and enter state 10
	type           shift, and enter state 11


State 6

	Stm -> instance . type type "{" "}"                 (rule 8)

	type           shift, and enter state 9


State 7

	Stm -> class . type ident "{" "}"                   (rule 5)

	type           shift, and enter state 8


State 8

	Stm -> class type . ident "{" "}"                   (rule 5)

	ident          shift, and enter state 28


State 9

	Stm -> instance type . type "{" "}"                 (rule 8)

	type           shift, and enter state 27


State 10

	Stm -> export "{" . "}"                             (rule 7)

	"}"            shift, and enter state 26


State 11

	Stm -> export type . "{" "}"                        (rule 6)

	"{"            shift, and enter state 25


State 12

	Stm -> ident ":" . Type                             (rule 2)
	Stm -> ident ":" . "?"                              (rule 3)

	"?"            shift, and enter state 23
	type           shift, and enter state 24

	Type           goto state 22

State 13

	Stm -> ident ":=" . Exp                             (rule 4)

	"("            shift, and enter state 18
	ident          shift, and enter state 19
	int            shift, and enter state 20
	pattern        shift, and enter state 21

	Exp            goto state 17

State 14

	Stm -> type "::=" . TypeDef                         (rule 1)

	type           shift, and enter state 16

	TypeDef        goto state 15

State 15

	Stm -> type "::=" TypeDef .                         (rule 1)
	TypeDef -> TypeDef . "|" type                       (rule 17)

	"|"            shift, and enter state 36
	%eof           reduce using rule 1


State 16

	TypeDef -> type .                                   (rule 16)

	"|"            reduce using rule 16
	%eof           reduce using rule 16


State 17

	Stm -> ident ":=" Exp .                             (rule 4)
	Exp -> Exp . ";"                                    (rule 11)

	";"            shift, and enter state 35
	%eof           reduce using rule 4


State 18

	Exp -> "(" . Exp ")"                                (rule 10)

	"("            shift, and enter state 18
	ident          shift, and enter state 19
	int            shift, and enter state 20
	pattern        shift, and enter state 21

	Exp            goto state 34

State 19

	Exp -> ident .                                      (rule 13)

	";"            reduce using rule 13
	")"            reduce using rule 13
	"}"            reduce using rule 13
	%eof           reduce using rule 13


State 20

	Exp -> int .                                        (rule 12)

	";"            reduce using rule 12
	")"            reduce using rule 12
	"}"            reduce using rule 12
	%eof           reduce using rule 12


State 21

	Exp -> pattern . "{" Exp "}"                        (rule 9)

	"{"            shift, and enter state 33


State 22

	Stm -> ident ":" Type .                             (rule 2)
	Type -> Type . "->" type                            (rule 19)

	"->"           shift, and enter state 32
	%eof           reduce using rule 2


State 23

	Stm -> ident ":" "?" .                              (rule 3)

	%eof           reduce using rule 3


State 24

	Type -> type .                                      (rule 18)

	"->"           reduce using rule 18
	%eof           reduce using rule 18


State 25

	Stm -> export type "{" . "}"                        (rule 6)

	"}"            shift, and enter state 31


State 26

	Stm -> export "{" "}" .                             (rule 7)

	%eof           reduce using rule 7


State 27

	Stm -> instance type type . "{" "}"                 (rule 8)

	"{"            shift, and enter state 30


State 28

	Stm -> class type ident . "{" "}"                   (rule 5)

	"{"            shift, and enter state 29


State 29

	Stm -> class type ident "{" . "}"                   (rule 5)

	"}"            shift, and enter state 42


State 30

	Stm -> instance type type "{" . "}"                 (rule 8)

	"}"            shift, and enter state 41


State 31

	Stm -> export type "{" "}" .                        (rule 6)

	%eof           reduce using rule 6


State 32

	Type -> Type "->" . type                            (rule 19)

	type           shift, and enter state 40


State 33

	Exp -> pattern "{" . Exp "}"                        (rule 9)

	"("            shift, and enter state 18
	ident          shift, and enter state 19
	int            shift, and enter state 20
	pattern        shift, and enter state 21

	Exp            goto state 39

State 34

	Exp -> "(" Exp . ")"                                (rule 10)
	Exp -> Exp . ";"                                    (rule 11)

	";"            shift, and enter state 35
	")"            shift, and enter state 38


State 35

	Exp -> Exp ";" .                                    (rule 11)

	";"            reduce using rule 11
	")"            reduce using rule 11
	"}"            reduce using rule 11
	%eof           reduce using rule 11


State 36

	TypeDef -> TypeDef "|" . type                       (rule 17)

	type           shift, and enter state 37


State 37

	TypeDef -> TypeDef "|" type .                       (rule 17)

	"|"            reduce using rule 17
	%eof           reduce using rule 17


State 38

	Exp -> "(" Exp ")" .                                (rule 10)

	";"            reduce using rule 10
	")"            reduce using rule 10
	"}"            reduce using rule 10
	%eof           reduce using rule 10


State 39

	Exp -> pattern "{" Exp . "}"                        (rule 9)
	Exp -> Exp . ";"                                    (rule 11)

	";"            shift, and enter state 35
	"}"            shift, and enter state 43


State 40

	Type -> Type "->" type .                            (rule 19)

	"->"           reduce using rule 19
	%eof           reduce using rule 19


State 41

	Stm -> instance type type "{" "}" .                 (rule 8)

	%eof           reduce using rule 8


State 42

	Stm -> class type ident "{" "}" .                   (rule 5)

	%eof           reduce using rule 5


State 43

	Exp -> pattern "{" Exp "}" .                        (rule 9)

	";"            reduce using rule 9
	")"            reduce using rule 9
	"}"            reduce using rule 9
	%eof           reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 20
Number of terminals: 19
Number of non-terminals: 6
Number of states: 44
