-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from grammar.y
-----------------------------------------------------------------------------

state 20 contains 1 shift/reduce conflicts.
state 23 contains 1 shift/reduce conflicts.

terminal binop is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Stms                                (0)
	Stms -> Stms Stm                                   (1)
	Stms -> Stm                                        (2)
	Stm -> type "::=" "{" TypeDef "}"                  (3)
	Stm -> type "<" TypeGArgs ">" "::=" "{" TypeDef "}"   (4)
	Stm -> ident ":" Type                              (5)
	Stm -> ident ":" Types "{" Exps "}"                (6)
	Stm -> ident ":" Type1 "{" Pattern "}"             (7)
	Stm -> ident "=" Exp                               (8)
	Stm -> ident "=" Exp ":" Type                      (9)
	Stm -> ident "=" "{" Exps "}"                      (10)
	Stm -> ident "=" "{" Exps "}" ":" Type             (11)
	Stm -> ";" Exp                                     (12)
	Exp -> "(" Exp ")"                                 (13)
	Exp -> "(" ")"                                     (14)
	Exp -> ident "<-" Exp                              (15)
	Exp -> ident                                       (16)
	Exp -> ident "->" Exp                              (17)
	Exp -> ident "->" "{" Exps "}"                     (18)
	Exp -> Const                                       (19)
	Exp -> Exp "+" Exp                                 (20)
	Exp -> Exp "-" Exp                                 (21)
	Exp -> Exp "*" Exp                                 (22)
	Exp -> Exp "/" Exp                                 (23)
	Exp -> ident "(" Args ")"                          (24)
	Exp -> macro "(" Args ")"                          (25)
	Exp -> type                                        (26)
	Exp -> type "(" Args ")"                           (27)
	Exp -> case Exp "{" Case "}"                       (28)
	Exp -> hole                                        (29)
	Exp -> "[" Args "]"                                (30)
	Exp -> Range                                       (31)
	Exp -> "(" Args1 ")"                               (32)
	Exp -> if Exp "{" Exps "}"                         (33)
	Exp -> else "{" Exps "}"                           (34)
	Exp -> for LoopVar in Exp "{" Exps "}"             (35)
	LoopVar -> ident                                   (36)
	LoopVar -> hole                                    (37)
	LoopVar -> "(" LoopVar ")"                         (38)
	Range -> "[" Exp ".." Exp "]"                      (39)
	Range -> "[" ".." Exp "]"                          (40)
	Range -> "[" Exp ".." "]"                          (41)
	Range -> "[" ".." "]"                              (42)
	Range -> "[" Exp ".." Exp ")"                      (43)
	Range -> "[" ".." Exp ")"                          (44)
	Args ->                                            (45)
	Args -> Exp                                        (46)
	Args -> Args "," Exp                               (47)
	Args1 -> Exp "," Exp                               (48)
	Args1 -> Args1 "," Exp                             (49)
	Case -> Case1                                      (50)
	Case -> Case ";" Case1                             (51)
	Case1 -> Exp "=>" Exp                              (52)
	Pattern -> Pattern1                                (53)
	Pattern -> Pattern ";" Pattern1                    (54)
	Pattern1 -> Args "=>" Exp                          (55)
	Pattern1 -> Args "=>" "{" Exps "}"                 (56)
	Const -> int                                       (57)
	Const -> str                                       (58)
	Const -> chr                                       (59)
	Exps -> Exp                                        (60)
	Exps -> Exps ";" Exp                               (61)
	Exps -> Exps Exp                                   (62)
	Types -> type                                      (63)
	Types -> type "<" TypeArgs ">"                     (64)
	Types -> "(" ")"                                   (65)
	Types -> ident                                     (66)
	TypeDef -> TypeCons                                (67)
	TypeDef -> TypeDef ";" TypeCons                    (68)
	TypeCons -> type                                   (69)
	TypeCons -> type "(" TypeArgs ")"                  (70)
	TypeArgs -> Types                                  (71)
	TypeArgs -> TypeArgs "," Types                     (72)
	Type -> Types                                      (73)
	Type -> Type "->" Types                            (74)
	Type1 -> Type "->" Types                           (75)
	TypeGArgs -> ident                                 (76)
	TypeGArgs -> TypeGArgs "," ident                   (77)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"->"           { TokenArrow       _ }
	"=>"           { TokenDoubleArrow _ }
	"<-"           { TokenLeftArrow   _ }
	"::="          { TokenData        _ }
	":"            { TokenTypeSign    _ }
	";"            { TokenSemi        _ }
	","            { TokenComma       _ }
	".."           { TokenDot         _ }
	str            { TokenString _ $$ }
	chr            { TokenChar   _ $$ }
	"="            { TokenAssign      _ }
	"("            { TokenLParen      _ }
	")"            { TokenRParen      _ }
	"{"            { TokenLBracket    _ }
	"}"            { TokenRBracket    _ }
	"["            { TokenLList       _ }
	"]"            { TokenRList       _ }
	"<"            { BinOp _ "<" }
	">"            { BinOp _ ">" }
	"-"            { BinOp _ "-" }
	"+"            { BinOp _ "+" }
	"*"            { BinOp _ "*" }
	"/"            { BinOp _ "/" }
	ident          { TokenIdent _ $$ }
	macro          { TokenMacroCall _ $$ }
	int            { TokenInt   _ $$ }
	type           { TokenType  _ $$ }
	hole           { TokenHole  _ $$ }
	case           { Builtin _ "case" }
	if             { Builtin _ "if" }
	else           { Builtin _ "else" }
	for            { Builtin _ "for" }
	in             { Builtin _ "in" }
	binop          { BinOp _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Stms            rules 1, 2
	Stm             rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
	Exp             rules 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	LoopVar         rules 36, 37, 38
	Range           rules 39, 40, 41, 42, 43, 44
	Args            rules 45, 46, 47
	Args1           rules 48, 49
	Case            rules 50, 51
	Case1           rule  52
	Pattern         rules 53, 54
	Pattern1        rules 55, 56
	Const           rules 57, 58, 59
	Exps            rules 60, 61, 62
	Types           rules 63, 64, 65, 66
	TypeDef         rules 67, 68
	TypeCons        rules 69, 70
	TypeArgs        rules 71, 72
	Type            rules 73, 74
	Type1           rule  75
	TypeGArgs       rules 76, 77

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Stms                               (rule 0)

	";"            shift, and enter state 4
	ident          shift, and enter state 5
	type           shift, and enter state 6

	Stms           goto state 7
	Stm            goto state 3

State 1

	Stms -> . Stms Stm                                  (rule 1)

	";"            shift, and enter state 4
	ident          shift, and enter state 5
	type           shift, and enter state 6

	Stms           goto state 2
	Stm            goto state 3

State 2

	Stms -> Stms . Stm                                  (rule 1)

	";"            shift, and enter state 4
	ident          shift, and enter state 5
	type           shift, and enter state 6

	Stm            goto state 8

State 3

	Stms -> Stm .                                       (rule 2)

	";"            reduce using rule 2
	ident          reduce using rule 2
	type           reduce using rule 2
	%eof           reduce using rule 2


State 4

	Stm -> ";" . Exp                                    (rule 12)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 13
	Range          goto state 14
	Const          goto state 15

State 5

	Stm -> ident . ":" Type                             (rule 5)
	Stm -> ident . ":" Types "{" Exps "}"               (rule 6)
	Stm -> ident . ":" Type1 "{" Pattern "}"            (rule 7)
	Stm -> ident . "=" Exp                              (rule 8)
	Stm -> ident . "=" Exp ":" Type                     (rule 9)
	Stm -> ident . "=" "{" Exps "}"                     (rule 10)
	Stm -> ident . "=" "{" Exps "}" ":" Type            (rule 11)

	":"            shift, and enter state 11
	"="            shift, and enter state 12


State 6

	Stm -> type . "::=" "{" TypeDef "}"                 (rule 3)
	Stm -> type . "<" TypeGArgs ">" "::=" "{" TypeDef "}"    (rule 4)

	"::="          shift, and enter state 9
	"<"            shift, and enter state 10


State 7

	%start_calc -> Stms .                               (rule 0)
	Stms -> Stms . Stm                                  (rule 1)

	";"            shift, and enter state 4
	ident          shift, and enter state 5
	type           shift, and enter state 6
	%eof           accept

	Stm            goto state 8

State 8

	Stms -> Stms Stm .                                  (rule 1)

	";"            reduce using rule 1
	ident          reduce using rule 1
	type           reduce using rule 1
	%eof           reduce using rule 1


State 9

	Stm -> type "::=" . "{" TypeDef "}"                 (rule 3)

	"{"            shift, and enter state 61


State 10

	Stm -> type "<" . TypeGArgs ">" "::=" "{" TypeDef "}"    (rule 4)

	ident          shift, and enter state 60

	TypeGArgs      goto state 59

State 11

	Stm -> ident ":" . Type                             (rule 5)
	Stm -> ident ":" . Types "{" Exps "}"               (rule 6)
	Stm -> ident ":" . Type1 "{" Pattern "}"            (rule 7)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 53
	Type           goto state 54
	Type1          goto state 55

State 12

	Stm -> ident "=" . Exp                              (rule 8)
	Stm -> ident "=" . Exp ":" Type                     (rule 9)
	Stm -> ident "=" . "{" Exps "}"                     (rule 10)
	Stm -> ident "=" . "{" Exps "}" ":" Type            (rule 11)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"{"            shift, and enter state 52
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 51
	Range          goto state 14
	Const          goto state 15

State 13

	Stm -> ";" Exp .                                    (rule 12)
	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)

	";"            reduce using rule 12
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 12
	type           reduce using rule 12
	%eof           reduce using rule 12


State 14

	Exp -> Range .                                      (rule 31)

	"=>"           reduce using rule 31
	":"            reduce using rule 31
	";"            reduce using rule 31
	","            reduce using rule 31
	".."           reduce using rule 31
	str            reduce using rule 31
	chr            reduce using rule 31
	"("            reduce using rule 31
	")"            reduce using rule 31
	"{"            reduce using rule 31
	"}"            reduce using rule 31
	"["            reduce using rule 31
	"]"            reduce using rule 31
	"-"            reduce using rule 31
	"+"            reduce using rule 31
	"*"            reduce using rule 31
	"/"            reduce using rule 31
	ident          reduce using rule 31
	macro          reduce using rule 31
	int            reduce using rule 31
	type           reduce using rule 31
	hole           reduce using rule 31
	case           reduce using rule 31
	if             reduce using rule 31
	else           reduce using rule 31
	for            reduce using rule 31
	%eof           reduce using rule 31


State 15

	Exp -> Const .                                      (rule 19)

	"=>"           reduce using rule 19
	":"            reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19
	".."           reduce using rule 19
	str            reduce using rule 19
	chr            reduce using rule 19
	"("            reduce using rule 19
	")"            reduce using rule 19
	"{"            reduce using rule 19
	"}"            reduce using rule 19
	"["            reduce using rule 19
	"]"            reduce using rule 19
	"-"            reduce using rule 19
	"+"            reduce using rule 19
	"*"            reduce using rule 19
	"/"            reduce using rule 19
	ident          reduce using rule 19
	macro          reduce using rule 19
	int            reduce using rule 19
	type           reduce using rule 19
	hole           reduce using rule 19
	case           reduce using rule 19
	if             reduce using rule 19
	else           reduce using rule 19
	for            reduce using rule 19
	%eof           reduce using rule 19


State 16

	Const -> str .                                      (rule 58)

	"=>"           reduce using rule 58
	":"            reduce using rule 58
	";"            reduce using rule 58
	","            reduce using rule 58
	".."           reduce using rule 58
	str            reduce using rule 58
	chr            reduce using rule 58
	"("            reduce using rule 58
	")"            reduce using rule 58
	"{"            reduce using rule 58
	"}"            reduce using rule 58
	"["            reduce using rule 58
	"]"            reduce using rule 58
	"-"            reduce using rule 58
	"+"            reduce using rule 58
	"*"            reduce using rule 58
	"/"            reduce using rule 58
	ident          reduce using rule 58
	macro          reduce using rule 58
	int            reduce using rule 58
	type           reduce using rule 58
	hole           reduce using rule 58
	case           reduce using rule 58
	if             reduce using rule 58
	else           reduce using rule 58
	for            reduce using rule 58
	%eof           reduce using rule 58


State 17

	Const -> chr .                                      (rule 59)

	"=>"           reduce using rule 59
	":"            reduce using rule 59
	";"            reduce using rule 59
	","            reduce using rule 59
	".."           reduce using rule 59
	str            reduce using rule 59
	chr            reduce using rule 59
	"("            reduce using rule 59
	")"            reduce using rule 59
	"{"            reduce using rule 59
	"}"            reduce using rule 59
	"["            reduce using rule 59
	"]"            reduce using rule 59
	"-"            reduce using rule 59
	"+"            reduce using rule 59
	"*"            reduce using rule 59
	"/"            reduce using rule 59
	ident          reduce using rule 59
	macro          reduce using rule 59
	int            reduce using rule 59
	type           reduce using rule 59
	hole           reduce using rule 59
	case           reduce using rule 59
	if             reduce using rule 59
	else           reduce using rule 59
	for            reduce using rule 59
	%eof           reduce using rule 59


State 18

	Exp -> "(" . Exp ")"                                (rule 13)
	Exp -> "(" . ")"                                    (rule 14)
	Exp -> "(" . Args1 ")"                              (rule 32)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	")"            shift, and enter state 46
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 44
	Range          goto state 14
	Args1          goto state 45
	Const          goto state 15

State 19

	Exp -> "[" . Args "]"                               (rule 30)
	Range -> "[" . Exp ".." Exp "]"                     (rule 39)
	Range -> "[" . ".." Exp "]"                         (rule 40)
	Range -> "[" . Exp ".." "]"                         (rule 41)
	Range -> "[" . ".." "]"                             (rule 42)
	Range -> "[" . Exp ".." Exp ")"                     (rule 43)
	Range -> "[" . ".." Exp ")"                         (rule 44)

	","            reduce using rule 45
	".."           shift, and enter state 43
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	"]"            reduce using rule 45
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 41
	Range          goto state 14
	Args           goto state 42
	Const          goto state 15

State 20

	Exp -> ident . "<-" Exp                             (rule 15)
	Exp -> ident .                                      (rule 16)
	Exp -> ident . "->" Exp                             (rule 17)
	Exp -> ident . "->" "{" Exps "}"                    (rule 18)
	Exp -> ident . "(" Args ")"                         (rule 24)

	"->"           shift, and enter state 38
	"=>"           reduce using rule 16
	"<-"           shift, and enter state 39
	":"            reduce using rule 16
	";"            reduce using rule 16
	","            reduce using rule 16
	".."           reduce using rule 16
	str            reduce using rule 16
	chr            reduce using rule 16
	"("            shift, and enter state 40
			(reduce using rule 16)

	")"            reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	"["            reduce using rule 16
	"]"            reduce using rule 16
	"-"            reduce using rule 16
	"+"            reduce using rule 16
	"*"            reduce using rule 16
	"/"            reduce using rule 16
	ident          reduce using rule 16
	macro          reduce using rule 16
	int            reduce using rule 16
	type           reduce using rule 16
	hole           reduce using rule 16
	case           reduce using rule 16
	if             reduce using rule 16
	else           reduce using rule 16
	for            reduce using rule 16
	%eof           reduce using rule 16


State 21

	Exp -> macro . "(" Args ")"                         (rule 25)

	"("            shift, and enter state 37


State 22

	Const -> int .                                      (rule 57)

	"=>"           reduce using rule 57
	":"            reduce using rule 57
	";"            reduce using rule 57
	","            reduce using rule 57
	".."           reduce using rule 57
	str            reduce using rule 57
	chr            reduce using rule 57
	"("            reduce using rule 57
	")"            reduce using rule 57
	"{"            reduce using rule 57
	"}"            reduce using rule 57
	"["            reduce using rule 57
	"]"            reduce using rule 57
	"-"            reduce using rule 57
	"+"            reduce using rule 57
	"*"            reduce using rule 57
	"/"            reduce using rule 57
	ident          reduce using rule 57
	macro          reduce using rule 57
	int            reduce using rule 57
	type           reduce using rule 57
	hole           reduce using rule 57
	case           reduce using rule 57
	if             reduce using rule 57
	else           reduce using rule 57
	for            reduce using rule 57
	%eof           reduce using rule 57


State 23

	Exp -> type .                                       (rule 26)
	Exp -> type . "(" Args ")"                          (rule 27)

	"=>"           reduce using rule 26
	":"            reduce using rule 26
	";"            reduce using rule 26
	","            reduce using rule 26
	".."           reduce using rule 26
	str            reduce using rule 26
	chr            reduce using rule 26
	"("            shift, and enter state 36
			(reduce using rule 26)

	")"            reduce using rule 26
	"{"            reduce using rule 26
	"}"            reduce using rule 26
	"["            reduce using rule 26
	"]"            reduce using rule 26
	"-"            reduce using rule 26
	"+"            reduce using rule 26
	"*"            reduce using rule 26
	"/"            reduce using rule 26
	ident          reduce using rule 26
	macro          reduce using rule 26
	int            reduce using rule 26
	type           reduce using rule 26
	hole           reduce using rule 26
	case           reduce using rule 26
	if             reduce using rule 26
	else           reduce using rule 26
	for            reduce using rule 26
	%eof           reduce using rule 26


State 24

	Exp -> hole .                                       (rule 29)

	"=>"           reduce using rule 29
	":"            reduce using rule 29
	";"            reduce using rule 29
	","            reduce using rule 29
	".."           reduce using rule 29
	str            reduce using rule 29
	chr            reduce using rule 29
	"("            reduce using rule 29
	")"            reduce using rule 29
	"{"            reduce using rule 29
	"}"            reduce using rule 29
	"["            reduce using rule 29
	"]"            reduce using rule 29
	"-"            reduce using rule 29
	"+"            reduce using rule 29
	"*"            reduce using rule 29
	"/"            reduce using rule 29
	ident          reduce using rule 29
	macro          reduce using rule 29
	int            reduce using rule 29
	type           reduce using rule 29
	hole           reduce using rule 29
	case           reduce using rule 29
	if             reduce using rule 29
	else           reduce using rule 29
	for            reduce using rule 29
	%eof           reduce using rule 29


State 25

	Exp -> case . Exp "{" Case "}"                      (rule 28)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 35
	Range          goto state 14
	Const          goto state 15

State 26

	Exp -> if . Exp "{" Exps "}"                        (rule 33)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 34
	Range          goto state 14
	Const          goto state 15

State 27

	Exp -> else . "{" Exps "}"                          (rule 34)

	"{"            shift, and enter state 33


State 28

	Exp -> for . LoopVar in Exp "{" Exps "}"            (rule 35)

	"("            shift, and enter state 30
	ident          shift, and enter state 31
	hole           shift, and enter state 32

	LoopVar        goto state 29

State 29

	Exp -> for LoopVar . in Exp "{" Exps "}"            (rule 35)

	in             shift, and enter state 99


State 30

	LoopVar -> "(" . LoopVar ")"                        (rule 38)

	"("            shift, and enter state 30
	ident          shift, and enter state 31
	hole           shift, and enter state 32

	LoopVar        goto state 98

State 31

	LoopVar -> ident .                                  (rule 36)

	")"            reduce using rule 36
	in             reduce using rule 36


State 32

	LoopVar -> hole .                                   (rule 37)

	")"            reduce using rule 37
	in             reduce using rule 37


State 33

	Exp -> else "{" . Exps "}"                          (rule 34)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 72
	Range          goto state 14
	Const          goto state 15
	Exps           goto state 97

State 34

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Exp -> if Exp . "{" Exps "}"                        (rule 33)

	"{"            shift, and enter state 96
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 35

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Exp -> case Exp . "{" Case "}"                      (rule 28)

	"{"            shift, and enter state 95
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 36

	Exp -> type "(" . Args ")"                          (rule 27)

	","            reduce using rule 45
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	")"            reduce using rule 45
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 88
	Range          goto state 14
	Args           goto state 94
	Const          goto state 15

State 37

	Exp -> macro "(" . Args ")"                         (rule 25)

	","            reduce using rule 45
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	")"            reduce using rule 45
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 88
	Range          goto state 14
	Args           goto state 93
	Const          goto state 15

State 38

	Exp -> ident "->" . Exp                             (rule 17)
	Exp -> ident "->" . "{" Exps "}"                    (rule 18)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"{"            shift, and enter state 92
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 91
	Range          goto state 14
	Const          goto state 15

State 39

	Exp -> ident "<-" . Exp                             (rule 15)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 90
	Range          goto state 14
	Const          goto state 15

State 40

	Exp -> ident "(" . Args ")"                         (rule 24)

	","            reduce using rule 45
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	")"            reduce using rule 45
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 88
	Range          goto state 14
	Args           goto state 89
	Const          goto state 15

State 41

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Range -> "[" Exp . ".." Exp "]"                     (rule 39)
	Range -> "[" Exp . ".." "]"                         (rule 41)
	Range -> "[" Exp . ".." Exp ")"                     (rule 43)
	Args -> Exp .                                       (rule 46)

	","            reduce using rule 46
	".."           shift, and enter state 87
	"]"            reduce using rule 46
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 42

	Exp -> "[" Args . "]"                               (rule 30)
	Args -> Args . "," Exp                              (rule 47)

	","            shift, and enter state 85
	"]"            shift, and enter state 86


State 43

	Range -> "[" ".." . Exp "]"                         (rule 40)
	Range -> "[" ".." . "]"                             (rule 42)
	Range -> "[" ".." . Exp ")"                         (rule 44)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	"]"            shift, and enter state 84
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 83
	Range          goto state 14
	Const          goto state 15

State 44

	Exp -> "(" Exp . ")"                                (rule 13)
	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Args1 -> Exp . "," Exp                              (rule 48)

	","            shift, and enter state 81
	")"            shift, and enter state 82
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 45

	Exp -> "(" Args1 . ")"                              (rule 32)
	Args1 -> Args1 . "," Exp                            (rule 49)

	","            shift, and enter state 79
	")"            shift, and enter state 80


State 46

	Exp -> "(" ")" .                                    (rule 14)

	"=>"           reduce using rule 14
	":"            reduce using rule 14
	";"            reduce using rule 14
	","            reduce using rule 14
	".."           reduce using rule 14
	str            reduce using rule 14
	chr            reduce using rule 14
	"("            reduce using rule 14
	")"            reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	"["            reduce using rule 14
	"]"            reduce using rule 14
	"-"            reduce using rule 14
	"+"            reduce using rule 14
	"*"            reduce using rule 14
	"/"            reduce using rule 14
	ident          reduce using rule 14
	macro          reduce using rule 14
	int            reduce using rule 14
	type           reduce using rule 14
	hole           reduce using rule 14
	case           reduce using rule 14
	if             reduce using rule 14
	else           reduce using rule 14
	for            reduce using rule 14
	%eof           reduce using rule 14


State 47

	Exp -> Exp "-" . Exp                                (rule 21)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 78
	Range          goto state 14
	Const          goto state 15

State 48

	Exp -> Exp "+" . Exp                                (rule 20)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 77
	Range          goto state 14
	Const          goto state 15

State 49

	Exp -> Exp "*" . Exp                                (rule 22)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 76
	Range          goto state 14
	Const          goto state 15

State 50

	Exp -> Exp "/" . Exp                                (rule 23)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 75
	Range          goto state 14
	Const          goto state 15

State 51

	Stm -> ident "=" Exp .                              (rule 8)
	Stm -> ident "=" Exp . ":" Type                     (rule 9)
	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)

	":"            shift, and enter state 74
	";"            reduce using rule 8
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 8
	type           reduce using rule 8
	%eof           reduce using rule 8


State 52

	Stm -> ident "=" "{" . Exps "}"                     (rule 10)
	Stm -> ident "=" "{" . Exps "}" ":" Type            (rule 11)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 72
	Range          goto state 14
	Const          goto state 15
	Exps           goto state 73

State 53

	Stm -> ident ":" Types . "{" Exps "}"               (rule 6)
	Type -> Types .                                     (rule 73)

	"->"           reduce using rule 73
	";"            reduce using rule 73
	"{"            shift, and enter state 71
	ident          reduce using rule 73
	type           reduce using rule 73
	%eof           reduce using rule 73


State 54

	Stm -> ident ":" Type .                             (rule 5)
	Type -> Type . "->" Types                           (rule 74)
	Type1 -> Type . "->" Types                          (rule 75)

	"->"           shift, and enter state 70
	";"            reduce using rule 5
	ident          reduce using rule 5
	type           reduce using rule 5
	%eof           reduce using rule 5


State 55

	Stm -> ident ":" Type1 . "{" Pattern "}"            (rule 7)

	"{"            shift, and enter state 69


State 56

	Types -> "(" . ")"                                  (rule 65)

	")"            shift, and enter state 68


State 57

	Types -> ident .                                    (rule 66)

	"->"           reduce using rule 66
	";"            reduce using rule 66
	","            reduce using rule 66
	")"            reduce using rule 66
	"{"            reduce using rule 66
	">"            reduce using rule 66
	ident          reduce using rule 66
	type           reduce using rule 66
	%eof           reduce using rule 66


State 58

	Types -> type .                                     (rule 63)
	Types -> type . "<" TypeArgs ">"                    (rule 64)

	"->"           reduce using rule 63
	";"            reduce using rule 63
	","            reduce using rule 63
	")"            reduce using rule 63
	"{"            reduce using rule 63
	"<"            shift, and enter state 67
	">"            reduce using rule 63
	ident          reduce using rule 63
	type           reduce using rule 63
	%eof           reduce using rule 63


State 59

	Stm -> type "<" TypeGArgs . ">" "::=" "{" TypeDef "}"    (rule 4)
	TypeGArgs -> TypeGArgs . "," ident                  (rule 77)

	","            shift, and enter state 65
	">"            shift, and enter state 66


State 60

	TypeGArgs -> ident .                                (rule 76)

	","            reduce using rule 76
	">"            reduce using rule 76


State 61

	Stm -> type "::=" "{" . TypeDef "}"                 (rule 3)

	type           shift, and enter state 64

	TypeDef        goto state 62
	TypeCons       goto state 63

State 62

	Stm -> type "::=" "{" TypeDef . "}"                 (rule 3)
	TypeDef -> TypeDef . ";" TypeCons                   (rule 68)

	";"            shift, and enter state 133
	"}"            shift, and enter state 134


State 63

	TypeDef -> TypeCons .                               (rule 67)

	";"            reduce using rule 67
	"}"            reduce using rule 67


State 64

	TypeCons -> type .                                  (rule 69)
	TypeCons -> type . "(" TypeArgs ")"                 (rule 70)

	";"            reduce using rule 69
	"("            shift, and enter state 132
	"}"            reduce using rule 69


State 65

	TypeGArgs -> TypeGArgs "," . ident                  (rule 77)

	ident          shift, and enter state 131


State 66

	Stm -> type "<" TypeGArgs ">" . "::=" "{" TypeDef "}"    (rule 4)

	"::="          shift, and enter state 130


State 67

	Types -> type "<" . TypeArgs ">"                    (rule 64)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 128
	TypeArgs       goto state 129

State 68

	Types -> "(" ")" .                                  (rule 65)

	"->"           reduce using rule 65
	";"            reduce using rule 65
	","            reduce using rule 65
	")"            reduce using rule 65
	"{"            reduce using rule 65
	">"            reduce using rule 65
	ident          reduce using rule 65
	type           reduce using rule 65
	%eof           reduce using rule 65


State 69

	Stm -> ident ":" Type1 "{" . Pattern "}"            (rule 7)

	"=>"           reduce using rule 45
	","            reduce using rule 45
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 88
	Range          goto state 14
	Args           goto state 125
	Pattern        goto state 126
	Pattern1       goto state 127
	Const          goto state 15

State 70

	Type -> Type "->" . Types                           (rule 74)
	Type1 -> Type "->" . Types                          (rule 75)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 124

State 71

	Stm -> ident ":" Types "{" . Exps "}"               (rule 6)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 72
	Range          goto state 14
	Const          goto state 15
	Exps           goto state 123

State 72

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Exps -> Exp .                                       (rule 60)

	";"            reduce using rule 60
	str            reduce using rule 60
	chr            reduce using rule 60
	"("            reduce using rule 60
	"}"            reduce using rule 60
	"["            reduce using rule 60
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 60
	macro          reduce using rule 60
	int            reduce using rule 60
	type           reduce using rule 60
	hole           reduce using rule 60
	case           reduce using rule 60
	if             reduce using rule 60
	else           reduce using rule 60
	for            reduce using rule 60


State 73

	Stm -> ident "=" "{" Exps . "}"                     (rule 10)
	Stm -> ident "=" "{" Exps . "}" ":" Type            (rule 11)
	Exps -> Exps . ";" Exp                              (rule 61)
	Exps -> Exps . Exp                                  (rule 62)

	";"            shift, and enter state 103
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"}"            shift, and enter state 122
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 102
	Range          goto state 14
	Const          goto state 15

State 74

	Stm -> ident "=" Exp ":" . Type                     (rule 9)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 120
	Type           goto state 121

State 75

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Exp -> Exp "/" Exp .                                (rule 23)

	"=>"           reduce using rule 23
	":"            reduce using rule 23
	";"            reduce using rule 23
	","            reduce using rule 23
	".."           reduce using rule 23
	str            reduce using rule 23
	chr            reduce using rule 23
	"("            reduce using rule 23
	")"            reduce using rule 23
	"{"            reduce using rule 23
	"}"            reduce using rule 23
	"["            reduce using rule 23
	"]"            reduce using rule 23
	"-"            reduce using rule 23
	"+"            reduce using rule 23
	"*"            reduce using rule 23
	"/"            reduce using rule 23
	ident          reduce using rule 23
	macro          reduce using rule 23
	int            reduce using rule 23
	type           reduce using rule 23
	hole           reduce using rule 23
	case           reduce using rule 23
	if             reduce using rule 23
	else           reduce using rule 23
	for            reduce using rule 23
	%eof           reduce using rule 23


State 76

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp "*" Exp .                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)

	"=>"           reduce using rule 22
	":"            reduce using rule 22
	";"            reduce using rule 22
	","            reduce using rule 22
	".."           reduce using rule 22
	str            reduce using rule 22
	chr            reduce using rule 22
	"("            reduce using rule 22
	")"            reduce using rule 22
	"{"            reduce using rule 22
	"}"            reduce using rule 22
	"["            reduce using rule 22
	"]"            reduce using rule 22
	"-"            reduce using rule 22
	"+"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	ident          reduce using rule 22
	macro          reduce using rule 22
	int            reduce using rule 22
	type           reduce using rule 22
	hole           reduce using rule 22
	case           reduce using rule 22
	if             reduce using rule 22
	else           reduce using rule 22
	for            reduce using rule 22
	%eof           reduce using rule 22


State 77

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp "+" Exp .                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)

	"=>"           reduce using rule 20
	":"            reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20
	".."           reduce using rule 20
	str            reduce using rule 20
	chr            reduce using rule 20
	"("            reduce using rule 20
	")"            reduce using rule 20
	"{"            reduce using rule 20
	"}"            reduce using rule 20
	"["            reduce using rule 20
	"]"            reduce using rule 20
	"-"            reduce using rule 20
	"+"            reduce using rule 20
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 20
	macro          reduce using rule 20
	int            reduce using rule 20
	type           reduce using rule 20
	hole           reduce using rule 20
	case           reduce using rule 20
	if             reduce using rule 20
	else           reduce using rule 20
	for            reduce using rule 20
	%eof           reduce using rule 20


State 78

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp "-" Exp .                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)

	"=>"           reduce using rule 21
	":"            reduce using rule 21
	";"            reduce using rule 21
	","            reduce using rule 21
	".."           reduce using rule 21
	str            reduce using rule 21
	chr            reduce using rule 21
	"("            reduce using rule 21
	")"            reduce using rule 21
	"{"            reduce using rule 21
	"}"            reduce using rule 21
	"["            reduce using rule 21
	"]"            reduce using rule 21
	"-"            reduce using rule 21
	"+"            reduce using rule 21
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 21
	macro          reduce using rule 21
	int            reduce using rule 21
	type           reduce using rule 21
	hole           reduce using rule 21
	case           reduce using rule 21
	if             reduce using rule 21
	else           reduce using rule 21
	for            reduce using rule 21
	%eof           reduce using rule 21


State 79

	Args1 -> Args1 "," . Exp                            (rule 49)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 119
	Range          goto state 14
	Const          goto state 15

State 80

	Exp -> "(" Args1 ")" .                              (rule 32)

	"=>"           reduce using rule 32
	":"            reduce using rule 32
	";"            reduce using rule 32
	","            reduce using rule 32
	".."           reduce using rule 32
	str            reduce using rule 32
	chr            reduce using rule 32
	"("            reduce using rule 32
	")"            reduce using rule 32
	"{"            reduce using rule 32
	"}"            reduce using rule 32
	"["            reduce using rule 32
	"]"            reduce using rule 32
	"-"            reduce using rule 32
	"+"            reduce using rule 32
	"*"            reduce using rule 32
	"/"            reduce using rule 32
	ident          reduce using rule 32
	macro          reduce using rule 32
	int            reduce using rule 32
	type           reduce using rule 32
	hole           reduce using rule 32
	case           reduce using rule 32
	if             reduce using rule 32
	else           reduce using rule 32
	for            reduce using rule 32
	%eof           reduce using rule 32


State 81

	Args1 -> Exp "," . Exp                              (rule 48)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 118
	Range          goto state 14
	Const          goto state 15

State 82

	Exp -> "(" Exp ")" .                                (rule 13)

	"=>"           reduce using rule 13
	":"            reduce using rule 13
	";"            reduce using rule 13
	","            reduce using rule 13
	".."           reduce using rule 13
	str            reduce using rule 13
	chr            reduce using rule 13
	"("            reduce using rule 13
	")"            reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	"["            reduce using rule 13
	"]"            reduce using rule 13
	"-"            reduce using rule 13
	"+"            reduce using rule 13
	"*"            reduce using rule 13
	"/"            reduce using rule 13
	ident          reduce using rule 13
	macro          reduce using rule 13
	int            reduce using rule 13
	type           reduce using rule 13
	hole           reduce using rule 13
	case           reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	for            reduce using rule 13
	%eof           reduce using rule 13


State 83

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Range -> "[" ".." Exp . "]"                         (rule 40)
	Range -> "[" ".." Exp . ")"                         (rule 44)

	")"            shift, and enter state 116
	"]"            shift, and enter state 117
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 84

	Range -> "[" ".." "]" .                             (rule 42)

	"=>"           reduce using rule 42
	":"            reduce using rule 42
	";"            reduce using rule 42
	","            reduce using rule 42
	".."           reduce using rule 42
	str            reduce using rule 42
	chr            reduce using rule 42
	"("            reduce using rule 42
	")"            reduce using rule 42
	"{"            reduce using rule 42
	"}"            reduce using rule 42
	"["            reduce using rule 42
	"]"            reduce using rule 42
	"-"            reduce using rule 42
	"+"            reduce using rule 42
	"*"            reduce using rule 42
	"/"            reduce using rule 42
	ident          reduce using rule 42
	macro          reduce using rule 42
	int            reduce using rule 42
	type           reduce using rule 42
	hole           reduce using rule 42
	case           reduce using rule 42
	if             reduce using rule 42
	else           reduce using rule 42
	for            reduce using rule 42
	%eof           reduce using rule 42


State 85

	Args -> Args "," . Exp                              (rule 47)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 115
	Range          goto state 14
	Const          goto state 15

State 86

	Exp -> "[" Args "]" .                               (rule 30)

	"=>"           reduce using rule 30
	":"            reduce using rule 30
	";"            reduce using rule 30
	","            reduce using rule 30
	".."           reduce using rule 30
	str            reduce using rule 30
	chr            reduce using rule 30
	"("            reduce using rule 30
	")"            reduce using rule 30
	"{"            reduce using rule 30
	"}"            reduce using rule 30
	"["            reduce using rule 30
	"]"            reduce using rule 30
	"-"            reduce using rule 30
	"+"            reduce using rule 30
	"*"            reduce using rule 30
	"/"            reduce using rule 30
	ident          reduce using rule 30
	macro          reduce using rule 30
	int            reduce using rule 30
	type           reduce using rule 30
	hole           reduce using rule 30
	case           reduce using rule 30
	if             reduce using rule 30
	else           reduce using rule 30
	for            reduce using rule 30
	%eof           reduce using rule 30


State 87

	Range -> "[" Exp ".." . Exp "]"                     (rule 39)
	Range -> "[" Exp ".." . "]"                         (rule 41)
	Range -> "[" Exp ".." . Exp ")"                     (rule 43)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	"]"            shift, and enter state 114
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 113
	Range          goto state 14
	Const          goto state 15

State 88

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Args -> Exp .                                       (rule 46)

	"=>"           reduce using rule 46
	","            reduce using rule 46
	")"            reduce using rule 46
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 89

	Exp -> ident "(" Args . ")"                         (rule 24)
	Args -> Args . "," Exp                              (rule 47)

	","            shift, and enter state 85
	")"            shift, and enter state 112


State 90

	Exp -> ident "<-" Exp .                             (rule 15)
	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)

	"=>"           reduce using rule 15
	":"            reduce using rule 15
	";"            reduce using rule 15
	","            reduce using rule 15
	".."           reduce using rule 15
	str            reduce using rule 15
	chr            reduce using rule 15
	"("            reduce using rule 15
	")"            reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	"["            reduce using rule 15
	"]"            reduce using rule 15
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 15
	macro          reduce using rule 15
	int            reduce using rule 15
	type           reduce using rule 15
	hole           reduce using rule 15
	case           reduce using rule 15
	if             reduce using rule 15
	else           reduce using rule 15
	for            reduce using rule 15
	%eof           reduce using rule 15


State 91

	Exp -> ident "->" Exp .                             (rule 17)
	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)

	"=>"           reduce using rule 17
	":"            reduce using rule 17
	";"            reduce using rule 17
	","            reduce using rule 17
	".."           reduce using rule 17
	str            reduce using rule 17
	chr            reduce using rule 17
	"("            reduce using rule 17
	")"            reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	"["            reduce using rule 17
	"]"            reduce using rule 17
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 17
	macro          reduce using rule 17
	int            reduce using rule 17
	type           reduce using rule 17
	hole           reduce using rule 17
	case           reduce using rule 17
	if             reduce using rule 17
	else           reduce using rule 17
	for            reduce using rule 17
	%eof           reduce using rule 17


State 92

	Exp -> ident "->" "{" . Exps "}"                    (rule 18)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 72
	Range          goto state 14
	Const          goto state 15
	Exps           goto state 111

State 93

	Exp -> macro "(" Args . ")"                         (rule 25)
	Args -> Args . "," Exp                              (rule 47)

	","            shift, and enter state 85
	")"            shift, and enter state 110


State 94

	Exp -> type "(" Args . ")"                          (rule 27)
	Args -> Args . "," Exp                              (rule 47)

	","            shift, and enter state 85
	")"            shift, and enter state 109


State 95

	Exp -> case Exp "{" . Case "}"                      (rule 28)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 106
	Range          goto state 14
	Case           goto state 107
	Case1          goto state 108
	Const          goto state 15

State 96

	Exp -> if Exp "{" . Exps "}"                        (rule 33)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 72
	Range          goto state 14
	Const          goto state 15
	Exps           goto state 105

State 97

	Exp -> else "{" Exps . "}"                          (rule 34)
	Exps -> Exps . ";" Exp                              (rule 61)
	Exps -> Exps . Exp                                  (rule 62)

	";"            shift, and enter state 103
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"}"            shift, and enter state 104
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 102
	Range          goto state 14
	Const          goto state 15

State 98

	LoopVar -> "(" LoopVar . ")"                        (rule 38)

	")"            shift, and enter state 101


State 99

	Exp -> for LoopVar in . Exp "{" Exps "}"            (rule 35)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 100
	Range          goto state 14
	Const          goto state 15

State 100

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Exp -> for LoopVar in Exp . "{" Exps "}"            (rule 35)

	"{"            shift, and enter state 154
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 101

	LoopVar -> "(" LoopVar ")" .                        (rule 38)

	")"            reduce using rule 38
	in             reduce using rule 38


State 102

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Exps -> Exps Exp .                                  (rule 62)

	";"            reduce using rule 62
	str            reduce using rule 62
	chr            reduce using rule 62
	"("            reduce using rule 62
	"}"            reduce using rule 62
	"["            reduce using rule 62
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 62
	macro          reduce using rule 62
	int            reduce using rule 62
	type           reduce using rule 62
	hole           reduce using rule 62
	case           reduce using rule 62
	if             reduce using rule 62
	else           reduce using rule 62
	for            reduce using rule 62


State 103

	Exps -> Exps ";" . Exp                              (rule 61)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 153
	Range          goto state 14
	Const          goto state 15

State 104

	Exp -> else "{" Exps "}" .                          (rule 34)

	"=>"           reduce using rule 34
	":"            reduce using rule 34
	";"            reduce using rule 34
	","            reduce using rule 34
	".."           reduce using rule 34
	str            reduce using rule 34
	chr            reduce using rule 34
	"("            reduce using rule 34
	")"            reduce using rule 34
	"{"            reduce using rule 34
	"}"            reduce using rule 34
	"["            reduce using rule 34
	"]"            reduce using rule 34
	"-"            reduce using rule 34
	"+"            reduce using rule 34
	"*"            reduce using rule 34
	"/"            reduce using rule 34
	ident          reduce using rule 34
	macro          reduce using rule 34
	int            reduce using rule 34
	type           reduce using rule 34
	hole           reduce using rule 34
	case           reduce using rule 34
	if             reduce using rule 34
	else           reduce using rule 34
	for            reduce using rule 34
	%eof           reduce using rule 34


State 105

	Exp -> if Exp "{" Exps . "}"                        (rule 33)
	Exps -> Exps . ";" Exp                              (rule 61)
	Exps -> Exps . Exp                                  (rule 62)

	";"            shift, and enter state 103
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"}"            shift, and enter state 152
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 102
	Range          goto state 14
	Const          goto state 15

State 106

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Case1 -> Exp . "=>" Exp                             (rule 52)

	"=>"           shift, and enter state 151
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 107

	Exp -> case Exp "{" Case . "}"                      (rule 28)
	Case -> Case . ";" Case1                            (rule 51)

	";"            shift, and enter state 149
	"}"            shift, and enter state 150


State 108

	Case -> Case1 .                                     (rule 50)

	";"            reduce using rule 50
	"}"            reduce using rule 50


State 109

	Exp -> type "(" Args ")" .                          (rule 27)

	"=>"           reduce using rule 27
	":"            reduce using rule 27
	";"            reduce using rule 27
	","            reduce using rule 27
	".."           reduce using rule 27
	str            reduce using rule 27
	chr            reduce using rule 27
	"("            reduce using rule 27
	")"            reduce using rule 27
	"{"            reduce using rule 27
	"}"            reduce using rule 27
	"["            reduce using rule 27
	"]"            reduce using rule 27
	"-"            reduce using rule 27
	"+"            reduce using rule 27
	"*"            reduce using rule 27
	"/"            reduce using rule 27
	ident          reduce using rule 27
	macro          reduce using rule 27
	int            reduce using rule 27
	type           reduce using rule 27
	hole           reduce using rule 27
	case           reduce using rule 27
	if             reduce using rule 27
	else           reduce using rule 27
	for            reduce using rule 27
	%eof           reduce using rule 27


State 110

	Exp -> macro "(" Args ")" .                         (rule 25)

	"=>"           reduce using rule 25
	":"            reduce using rule 25
	";"            reduce using rule 25
	","            reduce using rule 25
	".."           reduce using rule 25
	str            reduce using rule 25
	chr            reduce using rule 25
	"("            reduce using rule 25
	")"            reduce using rule 25
	"{"            reduce using rule 25
	"}"            reduce using rule 25
	"["            reduce using rule 25
	"]"            reduce using rule 25
	"-"            reduce using rule 25
	"+"            reduce using rule 25
	"*"            reduce using rule 25
	"/"            reduce using rule 25
	ident          reduce using rule 25
	macro          reduce using rule 25
	int            reduce using rule 25
	type           reduce using rule 25
	hole           reduce using rule 25
	case           reduce using rule 25
	if             reduce using rule 25
	else           reduce using rule 25
	for            reduce using rule 25
	%eof           reduce using rule 25


State 111

	Exp -> ident "->" "{" Exps . "}"                    (rule 18)
	Exps -> Exps . ";" Exp                              (rule 61)
	Exps -> Exps . Exp                                  (rule 62)

	";"            shift, and enter state 103
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"}"            shift, and enter state 148
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 102
	Range          goto state 14
	Const          goto state 15

State 112

	Exp -> ident "(" Args ")" .                         (rule 24)

	"=>"           reduce using rule 24
	":"            reduce using rule 24
	";"            reduce using rule 24
	","            reduce using rule 24
	".."           reduce using rule 24
	str            reduce using rule 24
	chr            reduce using rule 24
	"("            reduce using rule 24
	")"            reduce using rule 24
	"{"            reduce using rule 24
	"}"            reduce using rule 24
	"["            reduce using rule 24
	"]"            reduce using rule 24
	"-"            reduce using rule 24
	"+"            reduce using rule 24
	"*"            reduce using rule 24
	"/"            reduce using rule 24
	ident          reduce using rule 24
	macro          reduce using rule 24
	int            reduce using rule 24
	type           reduce using rule 24
	hole           reduce using rule 24
	case           reduce using rule 24
	if             reduce using rule 24
	else           reduce using rule 24
	for            reduce using rule 24
	%eof           reduce using rule 24


State 113

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Range -> "[" Exp ".." Exp . "]"                     (rule 39)
	Range -> "[" Exp ".." Exp . ")"                     (rule 43)

	")"            shift, and enter state 146
	"]"            shift, and enter state 147
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 114

	Range -> "[" Exp ".." "]" .                         (rule 41)

	"=>"           reduce using rule 41
	":"            reduce using rule 41
	";"            reduce using rule 41
	","            reduce using rule 41
	".."           reduce using rule 41
	str            reduce using rule 41
	chr            reduce using rule 41
	"("            reduce using rule 41
	")"            reduce using rule 41
	"{"            reduce using rule 41
	"}"            reduce using rule 41
	"["            reduce using rule 41
	"]"            reduce using rule 41
	"-"            reduce using rule 41
	"+"            reduce using rule 41
	"*"            reduce using rule 41
	"/"            reduce using rule 41
	ident          reduce using rule 41
	macro          reduce using rule 41
	int            reduce using rule 41
	type           reduce using rule 41
	hole           reduce using rule 41
	case           reduce using rule 41
	if             reduce using rule 41
	else           reduce using rule 41
	for            reduce using rule 41
	%eof           reduce using rule 41


State 115

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Args -> Args "," Exp .                              (rule 47)

	"=>"           reduce using rule 47
	","            reduce using rule 47
	")"            reduce using rule 47
	"]"            reduce using rule 47
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 116

	Range -> "[" ".." Exp ")" .                         (rule 44)

	"=>"           reduce using rule 44
	":"            reduce using rule 44
	";"            reduce using rule 44
	","            reduce using rule 44
	".."           reduce using rule 44
	str            reduce using rule 44
	chr            reduce using rule 44
	"("            reduce using rule 44
	")"            reduce using rule 44
	"{"            reduce using rule 44
	"}"            reduce using rule 44
	"["            reduce using rule 44
	"]"            reduce using rule 44
	"-"            reduce using rule 44
	"+"            reduce using rule 44
	"*"            reduce using rule 44
	"/"            reduce using rule 44
	ident          reduce using rule 44
	macro          reduce using rule 44
	int            reduce using rule 44
	type           reduce using rule 44
	hole           reduce using rule 44
	case           reduce using rule 44
	if             reduce using rule 44
	else           reduce using rule 44
	for            reduce using rule 44
	%eof           reduce using rule 44


State 117

	Range -> "[" ".." Exp "]" .                         (rule 40)

	"=>"           reduce using rule 40
	":"            reduce using rule 40
	";"            reduce using rule 40
	","            reduce using rule 40
	".."           reduce using rule 40
	str            reduce using rule 40
	chr            reduce using rule 40
	"("            reduce using rule 40
	")"            reduce using rule 40
	"{"            reduce using rule 40
	"}"            reduce using rule 40
	"["            reduce using rule 40
	"]"            reduce using rule 40
	"-"            reduce using rule 40
	"+"            reduce using rule 40
	"*"            reduce using rule 40
	"/"            reduce using rule 40
	ident          reduce using rule 40
	macro          reduce using rule 40
	int            reduce using rule 40
	type           reduce using rule 40
	hole           reduce using rule 40
	case           reduce using rule 40
	if             reduce using rule 40
	else           reduce using rule 40
	for            reduce using rule 40
	%eof           reduce using rule 40


State 118

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Args1 -> Exp "," Exp .                              (rule 48)

	","            reduce using rule 48
	")"            reduce using rule 48
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 119

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Args1 -> Args1 "," Exp .                            (rule 49)

	","            reduce using rule 49
	")"            reduce using rule 49
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 120

	Type -> Types .                                     (rule 73)

	"->"           reduce using rule 73
	";"            reduce using rule 73
	ident          reduce using rule 73
	type           reduce using rule 73
	%eof           reduce using rule 73


State 121

	Stm -> ident "=" Exp ":" Type .                     (rule 9)
	Type -> Type . "->" Types                           (rule 74)

	"->"           shift, and enter state 145
	";"            reduce using rule 9
	ident          reduce using rule 9
	type           reduce using rule 9
	%eof           reduce using rule 9


State 122

	Stm -> ident "=" "{" Exps "}" .                     (rule 10)
	Stm -> ident "=" "{" Exps "}" . ":" Type            (rule 11)

	":"            shift, and enter state 144
	";"            reduce using rule 10
	ident          reduce using rule 10
	type           reduce using rule 10
	%eof           reduce using rule 10


State 123

	Stm -> ident ":" Types "{" Exps . "}"               (rule 6)
	Exps -> Exps . ";" Exp                              (rule 61)
	Exps -> Exps . Exp                                  (rule 62)

	";"            shift, and enter state 103
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"}"            shift, and enter state 143
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 102
	Range          goto state 14
	Const          goto state 15

State 124

	Type -> Type "->" Types .                           (rule 74)
	Type1 -> Type "->" Types .                          (rule 75)

	"->"           reduce using rule 74
	";"            reduce using rule 74
	"{"            reduce using rule 75
	ident          reduce using rule 74
	type           reduce using rule 74
	%eof           reduce using rule 74


State 125

	Args -> Args . "," Exp                              (rule 47)
	Pattern1 -> Args . "=>" Exp                         (rule 55)
	Pattern1 -> Args . "=>" "{" Exps "}"                (rule 56)

	"=>"           shift, and enter state 142
	","            shift, and enter state 85


State 126

	Stm -> ident ":" Type1 "{" Pattern . "}"            (rule 7)
	Pattern -> Pattern . ";" Pattern1                   (rule 54)

	";"            shift, and enter state 140
	"}"            shift, and enter state 141


State 127

	Pattern -> Pattern1 .                               (rule 53)

	";"            reduce using rule 53
	"}"            reduce using rule 53


State 128

	TypeArgs -> Types .                                 (rule 71)

	","            reduce using rule 71
	")"            reduce using rule 71
	">"            reduce using rule 71


State 129

	Types -> type "<" TypeArgs . ">"                    (rule 64)
	TypeArgs -> TypeArgs . "," Types                    (rule 72)

	","            shift, and enter state 138
	">"            shift, and enter state 139


State 130

	Stm -> type "<" TypeGArgs ">" "::=" . "{" TypeDef "}"    (rule 4)

	"{"            shift, and enter state 137


State 131

	TypeGArgs -> TypeGArgs "," ident .                  (rule 77)

	","            reduce using rule 77
	">"            reduce using rule 77


State 132

	TypeCons -> type "(" . TypeArgs ")"                 (rule 70)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 128
	TypeArgs       goto state 136

State 133

	TypeDef -> TypeDef ";" . TypeCons                   (rule 68)

	type           shift, and enter state 64

	TypeCons       goto state 135

State 134

	Stm -> type "::=" "{" TypeDef "}" .                 (rule 3)

	";"            reduce using rule 3
	ident          reduce using rule 3
	type           reduce using rule 3
	%eof           reduce using rule 3


State 135

	TypeDef -> TypeDef ";" TypeCons .                   (rule 68)

	";"            reduce using rule 68
	"}"            reduce using rule 68


State 136

	TypeCons -> type "(" TypeArgs . ")"                 (rule 70)
	TypeArgs -> TypeArgs . "," Types                    (rule 72)

	","            shift, and enter state 138
	")"            shift, and enter state 165


State 137

	Stm -> type "<" TypeGArgs ">" "::=" "{" . TypeDef "}"    (rule 4)

	type           shift, and enter state 64

	TypeDef        goto state 164
	TypeCons       goto state 63

State 138

	TypeArgs -> TypeArgs "," . Types                    (rule 72)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 163

State 139

	Types -> type "<" TypeArgs ">" .                    (rule 64)

	"->"           reduce using rule 64
	";"            reduce using rule 64
	","            reduce using rule 64
	")"            reduce using rule 64
	"{"            reduce using rule 64
	">"            reduce using rule 64
	ident          reduce using rule 64
	type           reduce using rule 64
	%eof           reduce using rule 64


State 140

	Pattern -> Pattern ";" . Pattern1                   (rule 54)

	"=>"           reduce using rule 45
	","            reduce using rule 45
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 88
	Range          goto state 14
	Args           goto state 125
	Pattern1       goto state 162
	Const          goto state 15

State 141

	Stm -> ident ":" Type1 "{" Pattern "}" .            (rule 7)

	";"            reduce using rule 7
	ident          reduce using rule 7
	type           reduce using rule 7
	%eof           reduce using rule 7


State 142

	Pattern1 -> Args "=>" . Exp                         (rule 55)
	Pattern1 -> Args "=>" . "{" Exps "}"                (rule 56)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"{"            shift, and enter state 161
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 160
	Range          goto state 14
	Const          goto state 15

State 143

	Stm -> ident ":" Types "{" Exps "}" .               (rule 6)

	";"            reduce using rule 6
	ident          reduce using rule 6
	type           reduce using rule 6
	%eof           reduce using rule 6


State 144

	Stm -> ident "=" "{" Exps "}" ":" . Type            (rule 11)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 120
	Type           goto state 159

State 145

	Type -> Type "->" . Types                           (rule 74)

	"("            shift, and enter state 56
	ident          shift, and enter state 57
	type           shift, and enter state 58

	Types          goto state 158

State 146

	Range -> "[" Exp ".." Exp ")" .                     (rule 43)

	"=>"           reduce using rule 43
	":"            reduce using rule 43
	";"            reduce using rule 43
	","            reduce using rule 43
	".."           reduce using rule 43
	str            reduce using rule 43
	chr            reduce using rule 43
	"("            reduce using rule 43
	")"            reduce using rule 43
	"{"            reduce using rule 43
	"}"            reduce using rule 43
	"["            reduce using rule 43
	"]"            reduce using rule 43
	"-"            reduce using rule 43
	"+"            reduce using rule 43
	"*"            reduce using rule 43
	"/"            reduce using rule 43
	ident          reduce using rule 43
	macro          reduce using rule 43
	int            reduce using rule 43
	type           reduce using rule 43
	hole           reduce using rule 43
	case           reduce using rule 43
	if             reduce using rule 43
	else           reduce using rule 43
	for            reduce using rule 43
	%eof           reduce using rule 43


State 147

	Range -> "[" Exp ".." Exp "]" .                     (rule 39)

	"=>"           reduce using rule 39
	":"            reduce using rule 39
	";"            reduce using rule 39
	","            reduce using rule 39
	".."           reduce using rule 39
	str            reduce using rule 39
	chr            reduce using rule 39
	"("            reduce using rule 39
	")"            reduce using rule 39
	"{"            reduce using rule 39
	"}"            reduce using rule 39
	"["            reduce using rule 39
	"]"            reduce using rule 39
	"-"            reduce using rule 39
	"+"            reduce using rule 39
	"*"            reduce using rule 39
	"/"            reduce using rule 39
	ident          reduce using rule 39
	macro          reduce using rule 39
	int            reduce using rule 39
	type           reduce using rule 39
	hole           reduce using rule 39
	case           reduce using rule 39
	if             reduce using rule 39
	else           reduce using rule 39
	for            reduce using rule 39
	%eof           reduce using rule 39


State 148

	Exp -> ident "->" "{" Exps "}" .                    (rule 18)

	"=>"           reduce using rule 18
	":"            reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18
	".."           reduce using rule 18
	str            reduce using rule 18
	chr            reduce using rule 18
	"("            reduce using rule 18
	")"            reduce using rule 18
	"{"            reduce using rule 18
	"}"            reduce using rule 18
	"["            reduce using rule 18
	"]"            reduce using rule 18
	"-"            reduce using rule 18
	"+"            reduce using rule 18
	"*"            reduce using rule 18
	"/"            reduce using rule 18
	ident          reduce using rule 18
	macro          reduce using rule 18
	int            reduce using rule 18
	type           reduce using rule 18
	hole           reduce using rule 18
	case           reduce using rule 18
	if             reduce using rule 18
	else           reduce using rule 18
	for            reduce using rule 18
	%eof           reduce using rule 18


State 149

	Case -> Case ";" . Case1                            (rule 51)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 106
	Range          goto state 14
	Case1          goto state 157
	Const          goto state 15

State 150

	Exp -> case Exp "{" Case "}" .                      (rule 28)

	"=>"           reduce using rule 28
	":"            reduce using rule 28
	";"            reduce using rule 28
	","            reduce using rule 28
	".."           reduce using rule 28
	str            reduce using rule 28
	chr            reduce using rule 28
	"("            reduce using rule 28
	")"            reduce using rule 28
	"{"            reduce using rule 28
	"}"            reduce using rule 28
	"["            reduce using rule 28
	"]"            reduce using rule 28
	"-"            reduce using rule 28
	"+"            reduce using rule 28
	"*"            reduce using rule 28
	"/"            reduce using rule 28
	ident          reduce using rule 28
	macro          reduce using rule 28
	int            reduce using rule 28
	type           reduce using rule 28
	hole           reduce using rule 28
	case           reduce using rule 28
	if             reduce using rule 28
	else           reduce using rule 28
	for            reduce using rule 28
	%eof           reduce using rule 28


State 151

	Case1 -> Exp "=>" . Exp                             (rule 52)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 156
	Range          goto state 14
	Const          goto state 15

State 152

	Exp -> if Exp "{" Exps "}" .                        (rule 33)

	"=>"           reduce using rule 33
	":"            reduce using rule 33
	";"            reduce using rule 33
	","            reduce using rule 33
	".."           reduce using rule 33
	str            reduce using rule 33
	chr            reduce using rule 33
	"("            reduce using rule 33
	")"            reduce using rule 33
	"{"            reduce using rule 33
	"}"            reduce using rule 33
	"["            reduce using rule 33
	"]"            reduce using rule 33
	"-"            reduce using rule 33
	"+"            reduce using rule 33
	"*"            reduce using rule 33
	"/"            reduce using rule 33
	ident          reduce using rule 33
	macro          reduce using rule 33
	int            reduce using rule 33
	type           reduce using rule 33
	hole           reduce using rule 33
	case           reduce using rule 33
	if             reduce using rule 33
	else           reduce using rule 33
	for            reduce using rule 33
	%eof           reduce using rule 33


State 153

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Exps -> Exps ";" Exp .                              (rule 61)

	";"            reduce using rule 61
	str            reduce using rule 61
	chr            reduce using rule 61
	"("            reduce using rule 61
	"}"            reduce using rule 61
	"["            reduce using rule 61
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50
	ident          reduce using rule 61
	macro          reduce using rule 61
	int            reduce using rule 61
	type           reduce using rule 61
	hole           reduce using rule 61
	case           reduce using rule 61
	if             reduce using rule 61
	else           reduce using rule 61
	for            reduce using rule 61


State 154

	Exp -> for LoopVar in Exp "{" . Exps "}"            (rule 35)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 72
	Range          goto state 14
	Const          goto state 15
	Exps           goto state 155

State 155

	Exp -> for LoopVar in Exp "{" Exps . "}"            (rule 35)
	Exps -> Exps . ";" Exp                              (rule 61)
	Exps -> Exps . Exp                                  (rule 62)

	";"            shift, and enter state 103
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"}"            shift, and enter state 168
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 102
	Range          goto state 14
	Const          goto state 15

State 156

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Case1 -> Exp "=>" Exp .                             (rule 52)

	";"            reduce using rule 52
	"}"            reduce using rule 52
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 157

	Case -> Case ";" Case1 .                            (rule 51)

	";"            reduce using rule 51
	"}"            reduce using rule 51


State 158

	Type -> Type "->" Types .                           (rule 74)

	"->"           reduce using rule 74
	";"            reduce using rule 74
	ident          reduce using rule 74
	type           reduce using rule 74
	%eof           reduce using rule 74


State 159

	Stm -> ident "=" "{" Exps "}" ":" Type .            (rule 11)
	Type -> Type . "->" Types                           (rule 74)

	"->"           shift, and enter state 145
	";"            reduce using rule 11
	ident          reduce using rule 11
	type           reduce using rule 11
	%eof           reduce using rule 11


State 160

	Exp -> Exp . "+" Exp                                (rule 20)
	Exp -> Exp . "-" Exp                                (rule 21)
	Exp -> Exp . "*" Exp                                (rule 22)
	Exp -> Exp . "/" Exp                                (rule 23)
	Pattern1 -> Args "=>" Exp .                         (rule 55)

	";"            reduce using rule 55
	"}"            reduce using rule 55
	"-"            shift, and enter state 47
	"+"            shift, and enter state 48
	"*"            shift, and enter state 49
	"/"            shift, and enter state 50


State 161

	Pattern1 -> Args "=>" "{" . Exps "}"                (rule 56)

	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 72
	Range          goto state 14
	Const          goto state 15
	Exps           goto state 167

State 162

	Pattern -> Pattern ";" Pattern1 .                   (rule 54)

	";"            reduce using rule 54
	"}"            reduce using rule 54


State 163

	TypeArgs -> TypeArgs "," Types .                    (rule 72)

	","            reduce using rule 72
	")"            reduce using rule 72
	">"            reduce using rule 72


State 164

	Stm -> type "<" TypeGArgs ">" "::=" "{" TypeDef . "}"    (rule 4)
	TypeDef -> TypeDef . ";" TypeCons                   (rule 68)

	";"            shift, and enter state 133
	"}"            shift, and enter state 166


State 165

	TypeCons -> type "(" TypeArgs ")" .                 (rule 70)

	";"            reduce using rule 70
	"}"            reduce using rule 70


State 166

	Stm -> type "<" TypeGArgs ">" "::=" "{" TypeDef "}" .    (rule 4)

	";"            reduce using rule 4
	ident          reduce using rule 4
	type           reduce using rule 4
	%eof           reduce using rule 4


State 167

	Pattern1 -> Args "=>" "{" Exps . "}"                (rule 56)
	Exps -> Exps . ";" Exp                              (rule 61)
	Exps -> Exps . Exp                                  (rule 62)

	";"            shift, and enter state 103
	str            shift, and enter state 16
	chr            shift, and enter state 17
	"("            shift, and enter state 18
	"}"            shift, and enter state 169
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 102
	Range          goto state 14
	Const          goto state 15

State 168

	Exp -> for LoopVar in Exp "{" Exps "}" .            (rule 35)

	"=>"           reduce using rule 35
	":"            reduce using rule 35
	";"            reduce using rule 35
	","            reduce using rule 35
	".."           reduce using rule 35
	str            reduce using rule 35
	chr            reduce using rule 35
	"("            reduce using rule 35
	")"            reduce using rule 35
	"{"            reduce using rule 35
	"}"            reduce using rule 35
	"["            reduce using rule 35
	"]"            reduce using rule 35
	"-"            reduce using rule 35
	"+"            reduce using rule 35
	"*"            reduce using rule 35
	"/"            reduce using rule 35
	ident          reduce using rule 35
	macro          reduce using rule 35
	int            reduce using rule 35
	type           reduce using rule 35
	hole           reduce using rule 35
	case           reduce using rule 35
	if             reduce using rule 35
	else           reduce using rule 35
	for            reduce using rule 35
	%eof           reduce using rule 35


State 169

	Pattern1 -> Args "=>" "{" Exps "}" .                (rule 56)

	";"            reduce using rule 56
	"}"            reduce using rule 56


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 78
Number of terminals: 34
Number of non-terminals: 21
Number of states: 170
