-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Stms                                (0)
	Stms -> Stms Stm                                   (1)
	Stms -> Stm                                        (2)
	Stm -> type "::=" "{" TypeDef "}"                  (3)
	Stm -> ident ":" Type                              (4)
	Stm -> ident ":" Type "{" Pattern "}"              (5)
	Stm -> ident "=" Exp                               (6)
	Stm -> ident "=" Exp ":" Type                      (7)
	Stm -> ident "=" "{" Exps "}"                      (8)
	Stm -> ident "=" "{" Exps "}" ":" Type             (9)
	Exp -> "(" Exp ")"                                 (10)
	Exp -> Exp binop Exp                               (11)
	Exp -> ident "<-" Exp                              (12)
	Exp -> ident                                       (13)
	Exp -> ident "->" Exp                              (14)
	Exp -> Const                                       (15)
	Exp -> ident "(" Args ")"                          (16)
	Exp -> type                                        (17)
	Exp -> type "(" Args ")"                           (18)
	Exp -> case Exp "{" Case "}"                       (19)
	Exp -> hole                                        (20)
	Args ->                                            (21)
	Args -> Exp                                        (22)
	Args -> Args "," Exp                               (23)
	Case -> Case1                                      (24)
	Case -> Case ";" Case1                             (25)
	Case1 -> Exp "=>" Exp                              (26)
	Pattern -> Pattern1                                (27)
	Pattern -> Pattern ";" Pattern1                    (28)
	Pattern1 -> Exp "=>" Exp                           (29)
	Const -> int                                       (30)
	Const -> str                                       (31)
	Const -> chr                                       (32)
	Exps -> Exp                                        (33)
	Exps -> Exps ";" Exp                               (34)
	TypeDef -> type                                    (35)
	TypeDef -> TypeDef ";" type                        (36)
	Type -> type                                       (37)
	Type -> Type "->" type                             (38)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"->"           { TokenArrow }
	"=>"           { TokenDoubleArrow }
	"<-"           { TokenLeftArrow }
	"::="          { TokenData }
	":"            { TokenTypeSign }
	";"            { TokenSemi }
	","            { TokenComma }
	str            { TokenString $$ }
	chr            { TokenChar   $$ }
	"="            { TokenAssign }
	"("            { TokenLParen }
	")"            { TokenRParen }
	"{"            { TokenLBracket }
	"}"            { TokenRBracket }
	ident          { TokenIdent $$ }
	int            { TokenInt   $$ }
	type           { TokenType  $$ }
	hole           { TokenHole  $$ }
	case           { Builtin "case" }
	binop          { BinOp $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Stms            rules 1, 2
	Stm             rules 3, 4, 5, 6, 7, 8, 9
	Exp             rules 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
	Args            rules 21, 22, 23
	Case            rules 24, 25
	Case1           rule  26
	Pattern         rules 27, 28
	Pattern1        rule  29
	Const           rules 30, 31, 32
	Exps            rules 33, 34
	TypeDef         rules 35, 36
	Type            rules 37, 38

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Stms                               (rule 0)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 6
	Stm            goto state 3

State 1

	Stms -> . Stms Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 2
	Stm            goto state 3

State 2

	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stm            goto state 7

State 3

	Stms -> Stm .                                       (rule 2)

	ident          reduce using rule 2
	type           reduce using rule 2
	%eof           reduce using rule 2


State 4

	Stm -> ident . ":" Type                             (rule 4)
	Stm -> ident . ":" Type "{" Pattern "}"             (rule 5)
	Stm -> ident . "=" Exp                              (rule 6)
	Stm -> ident . "=" Exp ":" Type                     (rule 7)
	Stm -> ident . "=" "{" Exps "}"                     (rule 8)
	Stm -> ident . "=" "{" Exps "}" ":" Type            (rule 9)

	":"            shift, and enter state 9
	"="            shift, and enter state 10


State 5

	Stm -> type . "::=" "{" TypeDef "}"                 (rule 3)

	"::="          shift, and enter state 8


State 6

	%start_calc -> Stms .                               (rule 0)
	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5
	%eof           accept

	Stm            goto state 7

State 7

	Stms -> Stms Stm .                                  (rule 1)

	ident          reduce using rule 1
	type           reduce using rule 1
	%eof           reduce using rule 1


State 8

	Stm -> type "::=" . "{" TypeDef "}"                 (rule 3)

	"{"            shift, and enter state 24


State 9

	Stm -> ident ":" . Type                             (rule 4)
	Stm -> ident ":" . Type "{" Pattern "}"             (rule 5)

	type           shift, and enter state 23

	Type           goto state 22

State 10

	Stm -> ident "=" . Exp                              (rule 6)
	Stm -> ident "=" . Exp ":" Type                     (rule 7)
	Stm -> ident "=" . "{" Exps "}"                     (rule 8)
	Stm -> ident "=" . "{" Exps "}" ":" Type            (rule 9)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 11
	Const          goto state 12

State 11

	Stm -> ident "=" Exp .                              (rule 6)
	Stm -> ident "=" Exp . ":" Type                     (rule 7)
	Exp -> Exp . binop Exp                              (rule 11)

	":"            shift, and enter state 37
	ident          reduce using rule 6
	type           reduce using rule 6
	binop          shift, and enter state 38
	%eof           reduce using rule 6


State 12

	Exp -> Const .                                      (rule 15)

	"=>"           reduce using rule 15
	":"            reduce using rule 15
	";"            reduce using rule 15
	","            reduce using rule 15
	")"            reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	ident          reduce using rule 15
	type           reduce using rule 15
	binop          reduce using rule 15
	%eof           reduce using rule 15


State 13

	Const -> str .                                      (rule 31)

	"=>"           reduce using rule 31
	":"            reduce using rule 31
	";"            reduce using rule 31
	","            reduce using rule 31
	")"            reduce using rule 31
	"{"            reduce using rule 31
	"}"            reduce using rule 31
	ident          reduce using rule 31
	type           reduce using rule 31
	binop          reduce using rule 31
	%eof           reduce using rule 31


State 14

	Const -> chr .                                      (rule 32)

	"=>"           reduce using rule 32
	":"            reduce using rule 32
	";"            reduce using rule 32
	","            reduce using rule 32
	")"            reduce using rule 32
	"{"            reduce using rule 32
	"}"            reduce using rule 32
	ident          reduce using rule 32
	type           reduce using rule 32
	binop          reduce using rule 32
	%eof           reduce using rule 32


State 15

	Exp -> "(" . Exp ")"                                (rule 10)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 36
	Const          goto state 12

State 16

	Stm -> ident "=" "{" . Exps "}"                     (rule 8)
	Stm -> ident "=" "{" . Exps "}" ":" Type            (rule 9)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 34
	Const          goto state 12
	Exps           goto state 35

State 17

	Exp -> ident . "<-" Exp                             (rule 12)
	Exp -> ident .                                      (rule 13)
	Exp -> ident . "->" Exp                             (rule 14)
	Exp -> ident . "(" Args ")"                         (rule 16)

	"->"           shift, and enter state 31
	"=>"           reduce using rule 13
	"<-"           shift, and enter state 32
	":"            reduce using rule 13
	";"            reduce using rule 13
	","            reduce using rule 13
	"("            shift, and enter state 33
	")"            reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	ident          reduce using rule 13
	type           reduce using rule 13
	binop          reduce using rule 13
	%eof           reduce using rule 13


State 18

	Const -> int .                                      (rule 30)

	"=>"           reduce using rule 30
	":"            reduce using rule 30
	";"            reduce using rule 30
	","            reduce using rule 30
	")"            reduce using rule 30
	"{"            reduce using rule 30
	"}"            reduce using rule 30
	ident          reduce using rule 30
	type           reduce using rule 30
	binop          reduce using rule 30
	%eof           reduce using rule 30


State 19

	Exp -> type .                                       (rule 17)
	Exp -> type . "(" Args ")"                          (rule 18)

	"=>"           reduce using rule 17
	":"            reduce using rule 17
	";"            reduce using rule 17
	","            reduce using rule 17
	"("            shift, and enter state 30
	")"            reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	ident          reduce using rule 17
	type           reduce using rule 17
	binop          reduce using rule 17
	%eof           reduce using rule 17


State 20

	Exp -> hole .                                       (rule 20)

	"=>"           reduce using rule 20
	":"            reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20
	")"            reduce using rule 20
	"{"            reduce using rule 20
	"}"            reduce using rule 20
	ident          reduce using rule 20
	type           reduce using rule 20
	binop          reduce using rule 20
	%eof           reduce using rule 20


State 21

	Exp -> case . Exp "{" Case "}"                      (rule 19)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 29
	Const          goto state 12

State 22

	Stm -> ident ":" Type .                             (rule 4)
	Stm -> ident ":" Type . "{" Pattern "}"             (rule 5)
	Type -> Type . "->" type                            (rule 38)

	"->"           shift, and enter state 27
	"{"            shift, and enter state 28
	ident          reduce using rule 4
	type           reduce using rule 4
	%eof           reduce using rule 4


State 23

	Type -> type .                                      (rule 37)

	"->"           reduce using rule 37
	"{"            reduce using rule 37
	ident          reduce using rule 37
	type           reduce using rule 37
	%eof           reduce using rule 37


State 24

	Stm -> type "::=" "{" . TypeDef "}"                 (rule 3)

	type           shift, and enter state 26

	TypeDef        goto state 25

State 25

	Stm -> type "::=" "{" TypeDef . "}"                 (rule 3)
	TypeDef -> TypeDef . ";" type                       (rule 36)

	";"            shift, and enter state 54
	"}"            shift, and enter state 55


State 26

	TypeDef -> type .                                   (rule 35)

	";"            reduce using rule 35
	"}"            reduce using rule 35


State 27

	Type -> Type "->" . type                            (rule 38)

	type           shift, and enter state 53


State 28

	Stm -> ident ":" Type "{" . Pattern "}"             (rule 5)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 50
	Pattern        goto state 51
	Pattern1       goto state 52
	Const          goto state 12

State 29

	Exp -> Exp . binop Exp                              (rule 11)
	Exp -> case Exp . "{" Case "}"                      (rule 19)

	"{"            shift, and enter state 49
	binop          shift, and enter state 38


State 30

	Exp -> type "(" . Args ")"                          (rule 18)

	","            reduce using rule 21
	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            reduce using rule 21
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 44
	Args           goto state 48
	Const          goto state 12

State 31

	Exp -> ident "->" . Exp                             (rule 14)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 47
	Const          goto state 12

State 32

	Exp -> ident "<-" . Exp                             (rule 12)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 46
	Const          goto state 12

State 33

	Exp -> ident "(" . Args ")"                         (rule 16)

	","            reduce using rule 21
	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            reduce using rule 21
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 44
	Args           goto state 45
	Const          goto state 12

State 34

	Exp -> Exp . binop Exp                              (rule 11)
	Exps -> Exp .                                       (rule 33)

	";"            reduce using rule 33
	"}"            reduce using rule 33
	binop          shift, and enter state 38


State 35

	Stm -> ident "=" "{" Exps . "}"                     (rule 8)
	Stm -> ident "=" "{" Exps . "}" ":" Type            (rule 9)
	Exps -> Exps . ";" Exp                              (rule 34)

	";"            shift, and enter state 42
	"}"            shift, and enter state 43


State 36

	Exp -> "(" Exp . ")"                                (rule 10)
	Exp -> Exp . binop Exp                              (rule 11)

	")"            shift, and enter state 41
	binop          shift, and enter state 38


State 37

	Stm -> ident "=" Exp ":" . Type                     (rule 7)

	type           shift, and enter state 23

	Type           goto state 40

State 38

	Exp -> Exp binop . Exp                              (rule 11)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 39
	Const          goto state 12

State 39

	Exp -> Exp . binop Exp                              (rule 11)
	Exp -> Exp binop Exp .                              (rule 11)

	"=>"           reduce using rule 11
	":"            reduce using rule 11
	";"            reduce using rule 11
	","            reduce using rule 11
	")"            reduce using rule 11
	"{"            reduce using rule 11
	"}"            reduce using rule 11
	ident          reduce using rule 11
	type           reduce using rule 11
	binop          reduce using rule 11
	%eof           reduce using rule 11


State 40

	Stm -> ident "=" Exp ":" Type .                     (rule 7)
	Type -> Type . "->" type                            (rule 38)

	"->"           shift, and enter state 27
	ident          reduce using rule 7
	type           reduce using rule 7
	%eof           reduce using rule 7


State 41

	Exp -> "(" Exp ")" .                                (rule 10)

	"=>"           reduce using rule 10
	":"            reduce using rule 10
	";"            reduce using rule 10
	","            reduce using rule 10
	")"            reduce using rule 10
	"{"            reduce using rule 10
	"}"            reduce using rule 10
	ident          reduce using rule 10
	type           reduce using rule 10
	binop          reduce using rule 10
	%eof           reduce using rule 10


State 42

	Exps -> Exps ";" . Exp                              (rule 34)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 67
	Const          goto state 12

State 43

	Stm -> ident "=" "{" Exps "}" .                     (rule 8)
	Stm -> ident "=" "{" Exps "}" . ":" Type            (rule 9)

	":"            shift, and enter state 66
	ident          reduce using rule 8
	type           reduce using rule 8
	%eof           reduce using rule 8


State 44

	Exp -> Exp . binop Exp                              (rule 11)
	Args -> Exp .                                       (rule 22)

	","            reduce using rule 22
	")"            reduce using rule 22
	binop          shift, and enter state 38


State 45

	Exp -> ident "(" Args . ")"                         (rule 16)
	Args -> Args . "," Exp                              (rule 23)

	","            shift, and enter state 63
	")"            shift, and enter state 65


State 46

	Exp -> Exp . binop Exp                              (rule 11)
	Exp -> ident "<-" Exp .                             (rule 12)

	"=>"           reduce using rule 12
	":"            reduce using rule 12
	";"            reduce using rule 12
	","            reduce using rule 12
	")"            reduce using rule 12
	"{"            reduce using rule 12
	"}"            reduce using rule 12
	ident          reduce using rule 12
	type           reduce using rule 12
	binop          shift, and enter state 38
	%eof           reduce using rule 12


State 47

	Exp -> Exp . binop Exp                              (rule 11)
	Exp -> ident "->" Exp .                             (rule 14)

	"=>"           reduce using rule 14
	":"            reduce using rule 14
	";"            reduce using rule 14
	","            reduce using rule 14
	")"            reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	ident          reduce using rule 14
	type           reduce using rule 14
	binop          shift, and enter state 38
	%eof           reduce using rule 14


State 48

	Exp -> type "(" Args . ")"                          (rule 18)
	Args -> Args . "," Exp                              (rule 23)

	","            shift, and enter state 63
	")"            shift, and enter state 64


State 49

	Exp -> case Exp "{" . Case "}"                      (rule 19)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 60
	Case           goto state 61
	Case1          goto state 62
	Const          goto state 12

State 50

	Exp -> Exp . binop Exp                              (rule 11)
	Pattern1 -> Exp . "=>" Exp                          (rule 29)

	"=>"           shift, and enter state 59
	binop          shift, and enter state 38


State 51

	Stm -> ident ":" Type "{" Pattern . "}"             (rule 5)
	Pattern -> Pattern . ";" Pattern1                   (rule 28)

	";"            shift, and enter state 57
	"}"            shift, and enter state 58


State 52

	Pattern -> Pattern1 .                               (rule 27)

	";"            reduce using rule 27
	"}"            reduce using rule 27


State 53

	Type -> Type "->" type .                            (rule 38)

	"->"           reduce using rule 38
	"{"            reduce using rule 38
	ident          reduce using rule 38
	type           reduce using rule 38
	%eof           reduce using rule 38


State 54

	TypeDef -> TypeDef ";" . type                       (rule 36)

	type           shift, and enter state 56


State 55

	Stm -> type "::=" "{" TypeDef "}" .                 (rule 3)

	ident          reduce using rule 3
	type           reduce using rule 3
	%eof           reduce using rule 3


State 56

	TypeDef -> TypeDef ";" type .                       (rule 36)

	";"            reduce using rule 36
	"}"            reduce using rule 36


State 57

	Pattern -> Pattern ";" . Pattern1                   (rule 28)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 50
	Pattern1       goto state 74
	Const          goto state 12

State 58

	Stm -> ident ":" Type "{" Pattern "}" .             (rule 5)

	ident          reduce using rule 5
	type           reduce using rule 5
	%eof           reduce using rule 5


State 59

	Pattern1 -> Exp "=>" . Exp                          (rule 29)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 73
	Const          goto state 12

State 60

	Exp -> Exp . binop Exp                              (rule 11)
	Case1 -> Exp . "=>" Exp                             (rule 26)

	"=>"           shift, and enter state 72
	binop          shift, and enter state 38


State 61

	Exp -> case Exp "{" Case . "}"                      (rule 19)
	Case -> Case . ";" Case1                            (rule 25)

	";"            shift, and enter state 70
	"}"            shift, and enter state 71


State 62

	Case -> Case1 .                                     (rule 24)

	";"            reduce using rule 24
	"}"            reduce using rule 24


State 63

	Args -> Args "," . Exp                              (rule 23)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 69
	Const          goto state 12

State 64

	Exp -> type "(" Args ")" .                          (rule 18)

	"=>"           reduce using rule 18
	":"            reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18
	")"            reduce using rule 18
	"{"            reduce using rule 18
	"}"            reduce using rule 18
	ident          reduce using rule 18
	type           reduce using rule 18
	binop          reduce using rule 18
	%eof           reduce using rule 18


State 65

	Exp -> ident "(" Args ")" .                         (rule 16)

	"=>"           reduce using rule 16
	":"            reduce using rule 16
	";"            reduce using rule 16
	","            reduce using rule 16
	")"            reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	ident          reduce using rule 16
	type           reduce using rule 16
	binop          reduce using rule 16
	%eof           reduce using rule 16


State 66

	Stm -> ident "=" "{" Exps "}" ":" . Type            (rule 9)

	type           shift, and enter state 23

	Type           goto state 68

State 67

	Exp -> Exp . binop Exp                              (rule 11)
	Exps -> Exps ";" Exp .                              (rule 34)

	";"            reduce using rule 34
	"}"            reduce using rule 34
	binop          shift, and enter state 38


State 68

	Stm -> ident "=" "{" Exps "}" ":" Type .            (rule 9)
	Type -> Type . "->" type                            (rule 38)

	"->"           shift, and enter state 27
	ident          reduce using rule 9
	type           reduce using rule 9
	%eof           reduce using rule 9


State 69

	Exp -> Exp . binop Exp                              (rule 11)
	Args -> Args "," Exp .                              (rule 23)

	","            reduce using rule 23
	")"            reduce using rule 23
	binop          shift, and enter state 38


State 70

	Case -> Case ";" . Case1                            (rule 25)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 60
	Case1          goto state 76
	Const          goto state 12

State 71

	Exp -> case Exp "{" Case "}" .                      (rule 19)

	"=>"           reduce using rule 19
	":"            reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19
	")"            reduce using rule 19
	"{"            reduce using rule 19
	"}"            reduce using rule 19
	ident          reduce using rule 19
	type           reduce using rule 19
	binop          reduce using rule 19
	%eof           reduce using rule 19


State 72

	Case1 -> Exp "=>" . Exp                             (rule 26)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 75
	Const          goto state 12

State 73

	Exp -> Exp . binop Exp                              (rule 11)
	Pattern1 -> Exp "=>" Exp .                          (rule 29)

	";"            reduce using rule 29
	"}"            reduce using rule 29
	binop          shift, and enter state 38


State 74

	Pattern -> Pattern ";" Pattern1 .                   (rule 28)

	";"            reduce using rule 28
	"}"            reduce using rule 28


State 75

	Exp -> Exp . binop Exp                              (rule 11)
	Case1 -> Exp "=>" Exp .                             (rule 26)

	";"            reduce using rule 26
	"}"            reduce using rule 26
	binop          shift, and enter state 38


State 76

	Case -> Case ";" Case1 .                            (rule 25)

	";"            reduce using rule 25
	"}"            reduce using rule 25


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 39
Number of terminals: 20
Number of non-terminals: 13
Number of states: 77
