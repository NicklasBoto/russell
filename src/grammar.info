-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Stms                                (0)
	Stms -> Stms Stm                                   (1)
	Stms -> Stm                                        (2)
	Stm -> type "::=" "{" TypeDef "}"                  (3)
	Stm -> type "<" ident ">" "::=" "{" TypeDef "}"    (4)
	Stm -> ident ":" Type                              (5)
	Stm -> ident ":" Types "{" Exps "}"                (6)
	Stm -> ident ":" Type1 "{" Pattern "}"             (7)
	Stm -> ident "=" Exp                               (8)
	Stm -> ident "=" Exp ":" Type                      (9)
	Stm -> ident "=" "{" Exps "}"                      (10)
	Stm -> ident "=" "{" Exps "}" ":" Type             (11)
	Exp -> "(" Exp ")"                                 (12)
	Exp -> "(" ")"                                     (13)
	Exp -> Exp binop Exp                               (14)
	Exp -> ident "<-" Exp                              (15)
	Exp -> ident                                       (16)
	Exp -> ident "->" Exp                              (17)
	Exp -> Const                                       (18)
	Exp -> ident "(" Args ")"                          (19)
	Exp -> macro "(" Args ")"                          (20)
	Exp -> type                                        (21)
	Exp -> type "(" Args ")"                           (22)
	Exp -> case Exp "{" Case "}"                       (23)
	Exp -> hole                                        (24)
	Exp -> "[" Args "]"                                (25)
	Exp -> Range                                       (26)
	Exp -> "(" Args1 ")"                               (27)
	Exp -> if Exp "{" Exps "}"                         (28)
	Exp -> else "{" Exps "}"                           (29)
	Exp -> for ident in Exp "{" Exps "}"               (30)
	Range -> "[" int ".." int "]"                      (31)
	Range -> "[" ".." int "]"                          (32)
	Range -> "[" int ".." "]"                          (33)
	Range -> "[" ".." "]"                              (34)
	Range -> "[" int ".." int ")"                      (35)
	Range -> "[" ".." int ")"                          (36)
	Args ->                                            (37)
	Args -> Exp                                        (38)
	Args -> Args "," Exp                               (39)
	Args1 -> Exp "," Exp                               (40)
	Args1 -> Args1 "," Exp                             (41)
	Case -> Case1                                      (42)
	Case -> Case ";" Case1                             (43)
	Case1 -> Exp "=>" Exp                              (44)
	Pattern -> Pattern1                                (45)
	Pattern -> Pattern ";" Pattern1                    (46)
	Pattern1 -> Args "=>" Exp                          (47)
	Pattern1 -> Args "=>" "{" Exps "}"                 (48)
	Const -> int                                       (49)
	Const -> str                                       (50)
	Const -> chr                                       (51)
	Exps -> Exp                                        (52)
	Exps -> Exps ";" Exp                               (53)
	Types -> type                                      (54)
	Types -> type "<" TypeArgs ">"                     (55)
	Types -> "(" ")"                                   (56)
	Types -> ident                                     (57)
	TypeDef -> TypeCons                                (58)
	TypeDef -> TypeDef ";" TypeCons                    (59)
	TypeCons -> type                                   (60)
	TypeCons -> type "(" TypeArgs ")"                  (61)
	TypeArgs -> Types                                  (62)
	TypeArgs -> TypeArgs "," Types                     (63)
	Type -> Types                                      (64)
	Type -> Type "->" Types                            (65)
	Type1 -> Type "->" Types                           (66)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"->"           { TokenArrow       _ }
	"=>"           { TokenDoubleArrow _ }
	"<-"           { TokenLeftArrow   _ }
	"::="          { TokenData        _ }
	":"            { TokenTypeSign    _ }
	";"            { TokenSemi        _ }
	","            { TokenComma       _ }
	".."           { TokenDot         _ }
	str            { TokenString _ $$ }
	chr            { TokenChar   _ $$ }
	"="            { TokenAssign      _ }
	"("            { TokenLParen      _ }
	")"            { TokenRParen      _ }
	"{"            { TokenLBracket    _ }
	"}"            { TokenRBracket    _ }
	"["            { TokenLList       _ }
	"]"            { TokenRList       _ }
	"<"            { BinOp _ "<" }
	">"            { BinOp _ ">" }
	ident          { TokenIdent _ $$ }
	macro          { TokenMacroCall _ $$ }
	int            { TokenInt   _ $$ }
	type           { TokenType  _ $$ }
	hole           { TokenHole  _ $$ }
	case           { Builtin _ "case" }
	if             { Builtin _ "if" }
	else           { Builtin _ "else" }
	for            { Builtin _ "for" }
	in             { Builtin _ "in" }
	binop          { BinOp _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Stms            rules 1, 2
	Stm             rules 3, 4, 5, 6, 7, 8, 9, 10, 11
	Exp             rules 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	Range           rules 31, 32, 33, 34, 35, 36
	Args            rules 37, 38, 39
	Args1           rules 40, 41
	Case            rules 42, 43
	Case1           rule  44
	Pattern         rules 45, 46
	Pattern1        rules 47, 48
	Const           rules 49, 50, 51
	Exps            rules 52, 53
	Types           rules 54, 55, 56, 57
	TypeDef         rules 58, 59
	TypeCons        rules 60, 61
	TypeArgs        rules 62, 63
	Type            rules 64, 65
	Type1           rule  66

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Stms                               (rule 0)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 6
	Stm            goto state 3

State 1

	Stms -> . Stms Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 2
	Stm            goto state 3

State 2

	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stm            goto state 7

State 3

	Stms -> Stm .                                       (rule 2)

	ident          reduce using rule 2
	type           reduce using rule 2
	%eof           reduce using rule 2


State 4

	Stm -> ident . ":" Type                             (rule 5)
	Stm -> ident . ":" Types "{" Exps "}"               (rule 6)
	Stm -> ident . ":" Type1 "{" Pattern "}"            (rule 7)
	Stm -> ident . "=" Exp                              (rule 8)
	Stm -> ident . "=" Exp ":" Type                     (rule 9)
	Stm -> ident . "=" "{" Exps "}"                     (rule 10)
	Stm -> ident . "=" "{" Exps "}" ":" Type            (rule 11)

	":"            shift, and enter state 10
	"="            shift, and enter state 11


State 5

	Stm -> type . "::=" "{" TypeDef "}"                 (rule 3)
	Stm -> type . "<" ident ">" "::=" "{" TypeDef "}"    (rule 4)

	"::="          shift, and enter state 8
	"<"            shift, and enter state 9


State 6

	%start_calc -> Stms .                               (rule 0)
	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5
	%eof           accept

	Stm            goto state 7

State 7

	Stms -> Stms Stm .                                  (rule 1)

	ident          reduce using rule 1
	type           reduce using rule 1
	%eof           reduce using rule 1


State 8

	Stm -> type "::=" . "{" TypeDef "}"                 (rule 3)

	"{"            shift, and enter state 36


State 9

	Stm -> type "<" . ident ">" "::=" "{" TypeDef "}"    (rule 4)

	ident          shift, and enter state 35


State 10

	Stm -> ident ":" . Type                             (rule 5)
	Stm -> ident ":" . Types "{" Exps "}"               (rule 6)
	Stm -> ident ":" . Type1 "{" Pattern "}"            (rule 7)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 29
	Type           goto state 30
	Type1          goto state 31

State 11

	Stm -> ident "=" . Exp                              (rule 8)
	Stm -> ident "=" . Exp ":" Type                     (rule 9)
	Stm -> ident "=" . "{" Exps "}"                     (rule 10)
	Stm -> ident "=" . "{" Exps "}" ":" Type            (rule 11)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"{"            shift, and enter state 18
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 12
	Range          goto state 13
	Const          goto state 14

State 12

	Stm -> ident "=" Exp .                              (rule 8)
	Stm -> ident "=" Exp . ":" Type                     (rule 9)
	Exp -> Exp . binop Exp                              (rule 14)

	":"            shift, and enter state 64
	ident          reduce using rule 8
	type           reduce using rule 8
	binop          shift, and enter state 65
	%eof           reduce using rule 8


State 13

	Exp -> Range .                                      (rule 26)

	"=>"           reduce using rule 26
	":"            reduce using rule 26
	";"            reduce using rule 26
	","            reduce using rule 26
	")"            reduce using rule 26
	"{"            reduce using rule 26
	"}"            reduce using rule 26
	"]"            reduce using rule 26
	ident          reduce using rule 26
	type           reduce using rule 26
	binop          reduce using rule 26
	%eof           reduce using rule 26


State 14

	Exp -> Const .                                      (rule 18)

	"=>"           reduce using rule 18
	":"            reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18
	")"            reduce using rule 18
	"{"            reduce using rule 18
	"}"            reduce using rule 18
	"]"            reduce using rule 18
	ident          reduce using rule 18
	type           reduce using rule 18
	binop          reduce using rule 18
	%eof           reduce using rule 18


State 15

	Const -> str .                                      (rule 50)

	"=>"           reduce using rule 50
	":"            reduce using rule 50
	";"            reduce using rule 50
	","            reduce using rule 50
	")"            reduce using rule 50
	"{"            reduce using rule 50
	"}"            reduce using rule 50
	"]"            reduce using rule 50
	ident          reduce using rule 50
	type           reduce using rule 50
	binop          reduce using rule 50
	%eof           reduce using rule 50


State 16

	Const -> chr .                                      (rule 51)

	"=>"           reduce using rule 51
	":"            reduce using rule 51
	";"            reduce using rule 51
	","            reduce using rule 51
	")"            reduce using rule 51
	"{"            reduce using rule 51
	"}"            reduce using rule 51
	"]"            reduce using rule 51
	ident          reduce using rule 51
	type           reduce using rule 51
	binop          reduce using rule 51
	%eof           reduce using rule 51


State 17

	Exp -> "(" . Exp ")"                                (rule 12)
	Exp -> "(" . ")"                                    (rule 13)
	Exp -> "(" . Args1 ")"                              (rule 27)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	")"            shift, and enter state 63
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 61
	Range          goto state 13
	Args1          goto state 62
	Const          goto state 14

State 18

	Stm -> ident "=" "{" . Exps "}"                     (rule 10)
	Stm -> ident "=" "{" . Exps "}" ":" Type            (rule 11)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 59
	Range          goto state 13
	Const          goto state 14
	Exps           goto state 60

State 19

	Exp -> "[" . Args "]"                               (rule 25)
	Range -> "[" . int ".." int "]"                     (rule 31)
	Range -> "[" . ".." int "]"                         (rule 32)
	Range -> "[" . int ".." "]"                         (rule 33)
	Range -> "[" . ".." "]"                             (rule 34)
	Range -> "[" . int ".." int ")"                     (rule 35)
	Range -> "[" . ".." int ")"                         (rule 36)

	","            reduce using rule 37
	".."           shift, and enter state 57
	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	"]"            reduce using rule 37
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 58
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 55
	Range          goto state 13
	Args           goto state 56
	Const          goto state 14

State 20

	Exp -> ident . "<-" Exp                             (rule 15)
	Exp -> ident .                                      (rule 16)
	Exp -> ident . "->" Exp                             (rule 17)
	Exp -> ident . "(" Args ")"                         (rule 19)

	"->"           shift, and enter state 52
	"=>"           reduce using rule 16
	"<-"           shift, and enter state 53
	":"            reduce using rule 16
	";"            reduce using rule 16
	","            reduce using rule 16
	"("            shift, and enter state 54
	")"            reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	"]"            reduce using rule 16
	ident          reduce using rule 16
	type           reduce using rule 16
	binop          reduce using rule 16
	%eof           reduce using rule 16


State 21

	Exp -> macro . "(" Args ")"                         (rule 20)

	"("            shift, and enter state 51


State 22

	Const -> int .                                      (rule 49)

	"=>"           reduce using rule 49
	":"            reduce using rule 49
	";"            reduce using rule 49
	","            reduce using rule 49
	")"            reduce using rule 49
	"{"            reduce using rule 49
	"}"            reduce using rule 49
	"]"            reduce using rule 49
	ident          reduce using rule 49
	type           reduce using rule 49
	binop          reduce using rule 49
	%eof           reduce using rule 49


State 23

	Exp -> type .                                       (rule 21)
	Exp -> type . "(" Args ")"                          (rule 22)

	"=>"           reduce using rule 21
	":"            reduce using rule 21
	";"            reduce using rule 21
	","            reduce using rule 21
	"("            shift, and enter state 50
	")"            reduce using rule 21
	"{"            reduce using rule 21
	"}"            reduce using rule 21
	"]"            reduce using rule 21
	ident          reduce using rule 21
	type           reduce using rule 21
	binop          reduce using rule 21
	%eof           reduce using rule 21


State 24

	Exp -> hole .                                       (rule 24)

	"=>"           reduce using rule 24
	":"            reduce using rule 24
	";"            reduce using rule 24
	","            reduce using rule 24
	")"            reduce using rule 24
	"{"            reduce using rule 24
	"}"            reduce using rule 24
	"]"            reduce using rule 24
	ident          reduce using rule 24
	type           reduce using rule 24
	binop          reduce using rule 24
	%eof           reduce using rule 24


State 25

	Exp -> case . Exp "{" Case "}"                      (rule 23)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 49
	Range          goto state 13
	Const          goto state 14

State 26

	Exp -> if . Exp "{" Exps "}"                        (rule 28)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 48
	Range          goto state 13
	Const          goto state 14

State 27

	Exp -> else . "{" Exps "}"                          (rule 29)

	"{"            shift, and enter state 47


State 28

	Exp -> for . ident in Exp "{" Exps "}"              (rule 30)

	ident          shift, and enter state 46


State 29

	Stm -> ident ":" Types . "{" Exps "}"               (rule 6)
	Type -> Types .                                     (rule 64)

	"->"           reduce using rule 64
	"{"            shift, and enter state 45
	ident          reduce using rule 64
	type           reduce using rule 64
	%eof           reduce using rule 64


State 30

	Stm -> ident ":" Type .                             (rule 5)
	Type -> Type . "->" Types                           (rule 65)
	Type1 -> Type . "->" Types                          (rule 66)

	"->"           shift, and enter state 44
	ident          reduce using rule 5
	type           reduce using rule 5
	%eof           reduce using rule 5


State 31

	Stm -> ident ":" Type1 . "{" Pattern "}"            (rule 7)

	"{"            shift, and enter state 43


State 32

	Types -> "(" . ")"                                  (rule 56)

	")"            shift, and enter state 42


State 33

	Types -> ident .                                    (rule 57)

	"->"           reduce using rule 57
	","            reduce using rule 57
	")"            reduce using rule 57
	"{"            reduce using rule 57
	">"            reduce using rule 57
	ident          reduce using rule 57
	type           reduce using rule 57
	%eof           reduce using rule 57


State 34

	Types -> type .                                     (rule 54)
	Types -> type . "<" TypeArgs ">"                    (rule 55)

	"->"           reduce using rule 54
	","            reduce using rule 54
	")"            reduce using rule 54
	"{"            reduce using rule 54
	"<"            shift, and enter state 41
	">"            reduce using rule 54
	ident          reduce using rule 54
	type           reduce using rule 54
	%eof           reduce using rule 54


State 35

	Stm -> type "<" ident . ">" "::=" "{" TypeDef "}"    (rule 4)

	">"            shift, and enter state 40


State 36

	Stm -> type "::=" "{" . TypeDef "}"                 (rule 3)

	type           shift, and enter state 39

	TypeDef        goto state 37
	TypeCons       goto state 38

State 37

	Stm -> type "::=" "{" TypeDef . "}"                 (rule 3)
	TypeDef -> TypeDef . ";" TypeCons                   (rule 59)

	";"            shift, and enter state 98
	"}"            shift, and enter state 99


State 38

	TypeDef -> TypeCons .                               (rule 58)

	";"            reduce using rule 58
	"}"            reduce using rule 58


State 39

	TypeCons -> type .                                  (rule 60)
	TypeCons -> type . "(" TypeArgs ")"                 (rule 61)

	";"            reduce using rule 60
	"("            shift, and enter state 97
	"}"            reduce using rule 60


State 40

	Stm -> type "<" ident ">" . "::=" "{" TypeDef "}"    (rule 4)

	"::="          shift, and enter state 96


State 41

	Types -> type "<" . TypeArgs ">"                    (rule 55)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 94
	TypeArgs       goto state 95

State 42

	Types -> "(" ")" .                                  (rule 56)

	"->"           reduce using rule 56
	","            reduce using rule 56
	")"            reduce using rule 56
	"{"            reduce using rule 56
	">"            reduce using rule 56
	ident          reduce using rule 56
	type           reduce using rule 56
	%eof           reduce using rule 56


State 43

	Stm -> ident ":" Type1 "{" . Pattern "}"            (rule 7)

	"=>"           reduce using rule 37
	","            reduce using rule 37
	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 55
	Range          goto state 13
	Args           goto state 91
	Pattern        goto state 92
	Pattern1       goto state 93
	Const          goto state 14

State 44

	Type -> Type "->" . Types                           (rule 65)
	Type1 -> Type "->" . Types                          (rule 66)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 90

State 45

	Stm -> ident ":" Types "{" . Exps "}"               (rule 6)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 59
	Range          goto state 13
	Const          goto state 14
	Exps           goto state 89

State 46

	Exp -> for ident . in Exp "{" Exps "}"              (rule 30)

	in             shift, and enter state 88


State 47

	Exp -> else "{" . Exps "}"                          (rule 29)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 59
	Range          goto state 13
	Const          goto state 14
	Exps           goto state 87

State 48

	Exp -> Exp . binop Exp                              (rule 14)
	Exp -> if Exp . "{" Exps "}"                        (rule 28)

	"{"            shift, and enter state 86
	binop          shift, and enter state 65


State 49

	Exp -> Exp . binop Exp                              (rule 14)
	Exp -> case Exp . "{" Case "}"                      (rule 23)

	"{"            shift, and enter state 85
	binop          shift, and enter state 65


State 50

	Exp -> type "(" . Args ")"                          (rule 22)

	","            reduce using rule 37
	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	")"            reduce using rule 37
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 55
	Range          goto state 13
	Args           goto state 84
	Const          goto state 14

State 51

	Exp -> macro "(" . Args ")"                         (rule 20)

	","            reduce using rule 37
	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	")"            reduce using rule 37
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 55
	Range          goto state 13
	Args           goto state 83
	Const          goto state 14

State 52

	Exp -> ident "->" . Exp                             (rule 17)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 82
	Range          goto state 13
	Const          goto state 14

State 53

	Exp -> ident "<-" . Exp                             (rule 15)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 81
	Range          goto state 13
	Const          goto state 14

State 54

	Exp -> ident "(" . Args ")"                         (rule 19)

	","            reduce using rule 37
	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	")"            reduce using rule 37
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 55
	Range          goto state 13
	Args           goto state 80
	Const          goto state 14

State 55

	Exp -> Exp . binop Exp                              (rule 14)
	Args -> Exp .                                       (rule 38)

	"=>"           reduce using rule 38
	","            reduce using rule 38
	")"            reduce using rule 38
	"]"            reduce using rule 38
	binop          shift, and enter state 65


State 56

	Exp -> "[" Args . "]"                               (rule 25)
	Args -> Args . "," Exp                              (rule 39)

	","            shift, and enter state 78
	"]"            shift, and enter state 79


State 57

	Range -> "[" ".." . int "]"                         (rule 32)
	Range -> "[" ".." . "]"                             (rule 34)
	Range -> "[" ".." . int ")"                         (rule 36)

	"]"            shift, and enter state 76
	int            shift, and enter state 77


State 58

	Range -> "[" int . ".." int "]"                     (rule 31)
	Range -> "[" int . ".." "]"                         (rule 33)
	Range -> "[" int . ".." int ")"                     (rule 35)
	Const -> int .                                      (rule 49)

	","            reduce using rule 49
	".."           shift, and enter state 75
	"]"            reduce using rule 49
	binop          reduce using rule 49


State 59

	Exp -> Exp . binop Exp                              (rule 14)
	Exps -> Exp .                                       (rule 52)

	";"            reduce using rule 52
	"}"            reduce using rule 52
	binop          shift, and enter state 65


State 60

	Stm -> ident "=" "{" Exps . "}"                     (rule 10)
	Stm -> ident "=" "{" Exps . "}" ":" Type            (rule 11)
	Exps -> Exps . ";" Exp                              (rule 53)

	";"            shift, and enter state 73
	"}"            shift, and enter state 74


State 61

	Exp -> "(" Exp . ")"                                (rule 12)
	Exp -> Exp . binop Exp                              (rule 14)
	Args1 -> Exp . "," Exp                              (rule 40)

	","            shift, and enter state 71
	")"            shift, and enter state 72
	binop          shift, and enter state 65


State 62

	Exp -> "(" Args1 . ")"                              (rule 27)
	Args1 -> Args1 . "," Exp                            (rule 41)

	","            shift, and enter state 69
	")"            shift, and enter state 70


State 63

	Exp -> "(" ")" .                                    (rule 13)

	"=>"           reduce using rule 13
	":"            reduce using rule 13
	";"            reduce using rule 13
	","            reduce using rule 13
	")"            reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	"]"            reduce using rule 13
	ident          reduce using rule 13
	type           reduce using rule 13
	binop          reduce using rule 13
	%eof           reduce using rule 13


State 64

	Stm -> ident "=" Exp ":" . Type                     (rule 9)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 67
	Type           goto state 68

State 65

	Exp -> Exp binop . Exp                              (rule 14)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 66
	Range          goto state 13
	Const          goto state 14

State 66

	Exp -> Exp . binop Exp                              (rule 14)
	Exp -> Exp binop Exp .                              (rule 14)

	"=>"           reduce using rule 14
	":"            reduce using rule 14
	";"            reduce using rule 14
	","            reduce using rule 14
	")"            reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	"]"            reduce using rule 14
	ident          reduce using rule 14
	type           reduce using rule 14
	binop          reduce using rule 14
	%eof           reduce using rule 14


State 67

	Type -> Types .                                     (rule 64)

	"->"           reduce using rule 64
	ident          reduce using rule 64
	type           reduce using rule 64
	%eof           reduce using rule 64


State 68

	Stm -> ident "=" Exp ":" Type .                     (rule 9)
	Type -> Type . "->" Types                           (rule 65)

	"->"           shift, and enter state 127
	ident          reduce using rule 9
	type           reduce using rule 9
	%eof           reduce using rule 9


State 69

	Args1 -> Args1 "," . Exp                            (rule 41)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 126
	Range          goto state 13
	Const          goto state 14

State 70

	Exp -> "(" Args1 ")" .                              (rule 27)

	"=>"           reduce using rule 27
	":"            reduce using rule 27
	";"            reduce using rule 27
	","            reduce using rule 27
	")"            reduce using rule 27
	"{"            reduce using rule 27
	"}"            reduce using rule 27
	"]"            reduce using rule 27
	ident          reduce using rule 27
	type           reduce using rule 27
	binop          reduce using rule 27
	%eof           reduce using rule 27


State 71

	Args1 -> Exp "," . Exp                              (rule 40)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 125
	Range          goto state 13
	Const          goto state 14

State 72

	Exp -> "(" Exp ")" .                                (rule 12)

	"=>"           reduce using rule 12
	":"            reduce using rule 12
	";"            reduce using rule 12
	","            reduce using rule 12
	")"            reduce using rule 12
	"{"            reduce using rule 12
	"}"            reduce using rule 12
	"]"            reduce using rule 12
	ident          reduce using rule 12
	type           reduce using rule 12
	binop          reduce using rule 12
	%eof           reduce using rule 12


State 73

	Exps -> Exps ";" . Exp                              (rule 53)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 124
	Range          goto state 13
	Const          goto state 14

State 74

	Stm -> ident "=" "{" Exps "}" .                     (rule 10)
	Stm -> ident "=" "{" Exps "}" . ":" Type            (rule 11)

	":"            shift, and enter state 123
	ident          reduce using rule 10
	type           reduce using rule 10
	%eof           reduce using rule 10


State 75

	Range -> "[" int ".." . int "]"                     (rule 31)
	Range -> "[" int ".." . "]"                         (rule 33)
	Range -> "[" int ".." . int ")"                     (rule 35)

	"]"            shift, and enter state 121
	int            shift, and enter state 122


State 76

	Range -> "[" ".." "]" .                             (rule 34)

	"=>"           reduce using rule 34
	":"            reduce using rule 34
	";"            reduce using rule 34
	","            reduce using rule 34
	")"            reduce using rule 34
	"{"            reduce using rule 34
	"}"            reduce using rule 34
	"]"            reduce using rule 34
	ident          reduce using rule 34
	type           reduce using rule 34
	binop          reduce using rule 34
	%eof           reduce using rule 34


State 77

	Range -> "[" ".." int . "]"                         (rule 32)
	Range -> "[" ".." int . ")"                         (rule 36)

	")"            shift, and enter state 119
	"]"            shift, and enter state 120


State 78

	Args -> Args "," . Exp                              (rule 39)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 118
	Range          goto state 13
	Const          goto state 14

State 79

	Exp -> "[" Args "]" .                               (rule 25)

	"=>"           reduce using rule 25
	":"            reduce using rule 25
	";"            reduce using rule 25
	","            reduce using rule 25
	")"            reduce using rule 25
	"{"            reduce using rule 25
	"}"            reduce using rule 25
	"]"            reduce using rule 25
	ident          reduce using rule 25
	type           reduce using rule 25
	binop          reduce using rule 25
	%eof           reduce using rule 25


State 80

	Exp -> ident "(" Args . ")"                         (rule 19)
	Args -> Args . "," Exp                              (rule 39)

	","            shift, and enter state 78
	")"            shift, and enter state 117


State 81

	Exp -> Exp . binop Exp                              (rule 14)
	Exp -> ident "<-" Exp .                             (rule 15)

	"=>"           reduce using rule 15
	":"            reduce using rule 15
	";"            reduce using rule 15
	","            reduce using rule 15
	")"            reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	"]"            reduce using rule 15
	ident          reduce using rule 15
	type           reduce using rule 15
	binop          shift, and enter state 65
	%eof           reduce using rule 15


State 82

	Exp -> Exp . binop Exp                              (rule 14)
	Exp -> ident "->" Exp .                             (rule 17)

	"=>"           reduce using rule 17
	":"            reduce using rule 17
	";"            reduce using rule 17
	","            reduce using rule 17
	")"            reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	"]"            reduce using rule 17
	ident          reduce using rule 17
	type           reduce using rule 17
	binop          shift, and enter state 65
	%eof           reduce using rule 17


State 83

	Exp -> macro "(" Args . ")"                         (rule 20)
	Args -> Args . "," Exp                              (rule 39)

	","            shift, and enter state 78
	")"            shift, and enter state 116


State 84

	Exp -> type "(" Args . ")"                          (rule 22)
	Args -> Args . "," Exp                              (rule 39)

	","            shift, and enter state 78
	")"            shift, and enter state 115


State 85

	Exp -> case Exp "{" . Case "}"                      (rule 23)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 112
	Range          goto state 13
	Case           goto state 113
	Case1          goto state 114
	Const          goto state 14

State 86

	Exp -> if Exp "{" . Exps "}"                        (rule 28)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 59
	Range          goto state 13
	Const          goto state 14
	Exps           goto state 111

State 87

	Exp -> else "{" Exps . "}"                          (rule 29)
	Exps -> Exps . ";" Exp                              (rule 53)

	";"            shift, and enter state 73
	"}"            shift, and enter state 110


State 88

	Exp -> for ident in . Exp "{" Exps "}"              (rule 30)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 109
	Range          goto state 13
	Const          goto state 14

State 89

	Stm -> ident ":" Types "{" Exps . "}"               (rule 6)
	Exps -> Exps . ";" Exp                              (rule 53)

	";"            shift, and enter state 73
	"}"            shift, and enter state 108


State 90

	Type -> Type "->" Types .                           (rule 65)
	Type1 -> Type "->" Types .                          (rule 66)

	"->"           reduce using rule 65
	"{"            reduce using rule 66
	ident          reduce using rule 65
	type           reduce using rule 65
	%eof           reduce using rule 65


State 91

	Args -> Args . "," Exp                              (rule 39)
	Pattern1 -> Args . "=>" Exp                         (rule 47)
	Pattern1 -> Args . "=>" "{" Exps "}"                (rule 48)

	"=>"           shift, and enter state 107
	","            shift, and enter state 78


State 92

	Stm -> ident ":" Type1 "{" Pattern . "}"            (rule 7)
	Pattern -> Pattern . ";" Pattern1                   (rule 46)

	";"            shift, and enter state 105
	"}"            shift, and enter state 106


State 93

	Pattern -> Pattern1 .                               (rule 45)

	";"            reduce using rule 45
	"}"            reduce using rule 45


State 94

	TypeArgs -> Types .                                 (rule 62)

	","            reduce using rule 62
	")"            reduce using rule 62
	">"            reduce using rule 62


State 95

	Types -> type "<" TypeArgs . ">"                    (rule 55)
	TypeArgs -> TypeArgs . "," Types                    (rule 63)

	","            shift, and enter state 103
	">"            shift, and enter state 104


State 96

	Stm -> type "<" ident ">" "::=" . "{" TypeDef "}"    (rule 4)

	"{"            shift, and enter state 102


State 97

	TypeCons -> type "(" . TypeArgs ")"                 (rule 61)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 94
	TypeArgs       goto state 101

State 98

	TypeDef -> TypeDef ";" . TypeCons                   (rule 59)

	type           shift, and enter state 39

	TypeCons       goto state 100

State 99

	Stm -> type "::=" "{" TypeDef "}" .                 (rule 3)

	ident          reduce using rule 3
	type           reduce using rule 3
	%eof           reduce using rule 3


State 100

	TypeDef -> TypeDef ";" TypeCons .                   (rule 59)

	";"            reduce using rule 59
	"}"            reduce using rule 59


State 101

	TypeCons -> type "(" TypeArgs . ")"                 (rule 61)
	TypeArgs -> TypeArgs . "," Types                    (rule 63)

	","            shift, and enter state 103
	")"            shift, and enter state 142


State 102

	Stm -> type "<" ident ">" "::=" "{" . TypeDef "}"    (rule 4)

	type           shift, and enter state 39

	TypeDef        goto state 141
	TypeCons       goto state 38

State 103

	TypeArgs -> TypeArgs "," . Types                    (rule 63)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 140

State 104

	Types -> type "<" TypeArgs ">" .                    (rule 55)

	"->"           reduce using rule 55
	","            reduce using rule 55
	")"            reduce using rule 55
	"{"            reduce using rule 55
	">"            reduce using rule 55
	ident          reduce using rule 55
	type           reduce using rule 55
	%eof           reduce using rule 55


State 105

	Pattern -> Pattern ";" . Pattern1                   (rule 46)

	"=>"           reduce using rule 37
	","            reduce using rule 37
	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 55
	Range          goto state 13
	Args           goto state 91
	Pattern1       goto state 139
	Const          goto state 14

State 106

	Stm -> ident ":" Type1 "{" Pattern "}" .            (rule 7)

	ident          reduce using rule 7
	type           reduce using rule 7
	%eof           reduce using rule 7


State 107

	Pattern1 -> Args "=>" . Exp                         (rule 47)
	Pattern1 -> Args "=>" . "{" Exps "}"                (rule 48)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"{"            shift, and enter state 138
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 137
	Range          goto state 13
	Const          goto state 14

State 108

	Stm -> ident ":" Types "{" Exps "}" .               (rule 6)

	ident          reduce using rule 6
	type           reduce using rule 6
	%eof           reduce using rule 6


State 109

	Exp -> Exp . binop Exp                              (rule 14)
	Exp -> for ident in Exp . "{" Exps "}"              (rule 30)

	"{"            shift, and enter state 136
	binop          shift, and enter state 65


State 110

	Exp -> else "{" Exps "}" .                          (rule 29)

	"=>"           reduce using rule 29
	":"            reduce using rule 29
	";"            reduce using rule 29
	","            reduce using rule 29
	")"            reduce using rule 29
	"{"            reduce using rule 29
	"}"            reduce using rule 29
	"]"            reduce using rule 29
	ident          reduce using rule 29
	type           reduce using rule 29
	binop          reduce using rule 29
	%eof           reduce using rule 29


State 111

	Exp -> if Exp "{" Exps . "}"                        (rule 28)
	Exps -> Exps . ";" Exp                              (rule 53)

	";"            shift, and enter state 73
	"}"            shift, and enter state 135


State 112

	Exp -> Exp . binop Exp                              (rule 14)
	Case1 -> Exp . "=>" Exp                             (rule 44)

	"=>"           shift, and enter state 134
	binop          shift, and enter state 65


State 113

	Exp -> case Exp "{" Case . "}"                      (rule 23)
	Case -> Case . ";" Case1                            (rule 43)

	";"            shift, and enter state 132
	"}"            shift, and enter state 133


State 114

	Case -> Case1 .                                     (rule 42)

	";"            reduce using rule 42
	"}"            reduce using rule 42


State 115

	Exp -> type "(" Args ")" .                          (rule 22)

	"=>"           reduce using rule 22
	":"            reduce using rule 22
	";"            reduce using rule 22
	","            reduce using rule 22
	")"            reduce using rule 22
	"{"            reduce using rule 22
	"}"            reduce using rule 22
	"]"            reduce using rule 22
	ident          reduce using rule 22
	type           reduce using rule 22
	binop          reduce using rule 22
	%eof           reduce using rule 22


State 116

	Exp -> macro "(" Args ")" .                         (rule 20)

	"=>"           reduce using rule 20
	":"            reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20
	")"            reduce using rule 20
	"{"            reduce using rule 20
	"}"            reduce using rule 20
	"]"            reduce using rule 20
	ident          reduce using rule 20
	type           reduce using rule 20
	binop          reduce using rule 20
	%eof           reduce using rule 20


State 117

	Exp -> ident "(" Args ")" .                         (rule 19)

	"=>"           reduce using rule 19
	":"            reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19
	")"            reduce using rule 19
	"{"            reduce using rule 19
	"}"            reduce using rule 19
	"]"            reduce using rule 19
	ident          reduce using rule 19
	type           reduce using rule 19
	binop          reduce using rule 19
	%eof           reduce using rule 19


State 118

	Exp -> Exp . binop Exp                              (rule 14)
	Args -> Args "," Exp .                              (rule 39)

	"=>"           reduce using rule 39
	","            reduce using rule 39
	")"            reduce using rule 39
	"]"            reduce using rule 39
	binop          shift, and enter state 65


State 119

	Range -> "[" ".." int ")" .                         (rule 36)

	"=>"           reduce using rule 36
	":"            reduce using rule 36
	";"            reduce using rule 36
	","            reduce using rule 36
	")"            reduce using rule 36
	"{"            reduce using rule 36
	"}"            reduce using rule 36
	"]"            reduce using rule 36
	ident          reduce using rule 36
	type           reduce using rule 36
	binop          reduce using rule 36
	%eof           reduce using rule 36


State 120

	Range -> "[" ".." int "]" .                         (rule 32)

	"=>"           reduce using rule 32
	":"            reduce using rule 32
	";"            reduce using rule 32
	","            reduce using rule 32
	")"            reduce using rule 32
	"{"            reduce using rule 32
	"}"            reduce using rule 32
	"]"            reduce using rule 32
	ident          reduce using rule 32
	type           reduce using rule 32
	binop          reduce using rule 32
	%eof           reduce using rule 32


State 121

	Range -> "[" int ".." "]" .                         (rule 33)

	"=>"           reduce using rule 33
	":"            reduce using rule 33
	";"            reduce using rule 33
	","            reduce using rule 33
	")"            reduce using rule 33
	"{"            reduce using rule 33
	"}"            reduce using rule 33
	"]"            reduce using rule 33
	ident          reduce using rule 33
	type           reduce using rule 33
	binop          reduce using rule 33
	%eof           reduce using rule 33


State 122

	Range -> "[" int ".." int . "]"                     (rule 31)
	Range -> "[" int ".." int . ")"                     (rule 35)

	")"            shift, and enter state 130
	"]"            shift, and enter state 131


State 123

	Stm -> ident "=" "{" Exps "}" ":" . Type            (rule 11)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 67
	Type           goto state 129

State 124

	Exp -> Exp . binop Exp                              (rule 14)
	Exps -> Exps ";" Exp .                              (rule 53)

	";"            reduce using rule 53
	"}"            reduce using rule 53
	binop          shift, and enter state 65


State 125

	Exp -> Exp . binop Exp                              (rule 14)
	Args1 -> Exp "," Exp .                              (rule 40)

	","            reduce using rule 40
	")"            reduce using rule 40
	binop          shift, and enter state 65


State 126

	Exp -> Exp . binop Exp                              (rule 14)
	Args1 -> Args1 "," Exp .                            (rule 41)

	","            reduce using rule 41
	")"            reduce using rule 41
	binop          shift, and enter state 65


State 127

	Type -> Type "->" . Types                           (rule 65)

	"("            shift, and enter state 32
	ident          shift, and enter state 33
	type           shift, and enter state 34

	Types          goto state 128

State 128

	Type -> Type "->" Types .                           (rule 65)

	"->"           reduce using rule 65
	ident          reduce using rule 65
	type           reduce using rule 65
	%eof           reduce using rule 65


State 129

	Stm -> ident "=" "{" Exps "}" ":" Type .            (rule 11)
	Type -> Type . "->" Types                           (rule 65)

	"->"           shift, and enter state 127
	ident          reduce using rule 11
	type           reduce using rule 11
	%eof           reduce using rule 11


State 130

	Range -> "[" int ".." int ")" .                     (rule 35)

	"=>"           reduce using rule 35
	":"            reduce using rule 35
	";"            reduce using rule 35
	","            reduce using rule 35
	")"            reduce using rule 35
	"{"            reduce using rule 35
	"}"            reduce using rule 35
	"]"            reduce using rule 35
	ident          reduce using rule 35
	type           reduce using rule 35
	binop          reduce using rule 35
	%eof           reduce using rule 35


State 131

	Range -> "[" int ".." int "]" .                     (rule 31)

	"=>"           reduce using rule 31
	":"            reduce using rule 31
	";"            reduce using rule 31
	","            reduce using rule 31
	")"            reduce using rule 31
	"{"            reduce using rule 31
	"}"            reduce using rule 31
	"]"            reduce using rule 31
	ident          reduce using rule 31
	type           reduce using rule 31
	binop          reduce using rule 31
	%eof           reduce using rule 31


State 132

	Case -> Case ";" . Case1                            (rule 43)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 112
	Range          goto state 13
	Case1          goto state 147
	Const          goto state 14

State 133

	Exp -> case Exp "{" Case "}" .                      (rule 23)

	"=>"           reduce using rule 23
	":"            reduce using rule 23
	";"            reduce using rule 23
	","            reduce using rule 23
	")"            reduce using rule 23
	"{"            reduce using rule 23
	"}"            reduce using rule 23
	"]"            reduce using rule 23
	ident          reduce using rule 23
	type           reduce using rule 23
	binop          reduce using rule 23
	%eof           reduce using rule 23


State 134

	Case1 -> Exp "=>" . Exp                             (rule 44)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 146
	Range          goto state 13
	Const          goto state 14

State 135

	Exp -> if Exp "{" Exps "}" .                        (rule 28)

	"=>"           reduce using rule 28
	":"            reduce using rule 28
	";"            reduce using rule 28
	","            reduce using rule 28
	")"            reduce using rule 28
	"{"            reduce using rule 28
	"}"            reduce using rule 28
	"]"            reduce using rule 28
	ident          reduce using rule 28
	type           reduce using rule 28
	binop          reduce using rule 28
	%eof           reduce using rule 28


State 136

	Exp -> for ident in Exp "{" . Exps "}"              (rule 30)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 59
	Range          goto state 13
	Const          goto state 14
	Exps           goto state 145

State 137

	Exp -> Exp . binop Exp                              (rule 14)
	Pattern1 -> Args "=>" Exp .                         (rule 47)

	";"            reduce using rule 47
	"}"            reduce using rule 47
	binop          shift, and enter state 65


State 138

	Pattern1 -> Args "=>" "{" . Exps "}"                (rule 48)

	str            shift, and enter state 15
	chr            shift, and enter state 16
	"("            shift, and enter state 17
	"["            shift, and enter state 19
	ident          shift, and enter state 20
	macro          shift, and enter state 21
	int            shift, and enter state 22
	type           shift, and enter state 23
	hole           shift, and enter state 24
	case           shift, and enter state 25
	if             shift, and enter state 26
	else           shift, and enter state 27
	for            shift, and enter state 28

	Exp            goto state 59
	Range          goto state 13
	Const          goto state 14
	Exps           goto state 144

State 139

	Pattern -> Pattern ";" Pattern1 .                   (rule 46)

	";"            reduce using rule 46
	"}"            reduce using rule 46


State 140

	TypeArgs -> TypeArgs "," Types .                    (rule 63)

	","            reduce using rule 63
	")"            reduce using rule 63
	">"            reduce using rule 63


State 141

	Stm -> type "<" ident ">" "::=" "{" TypeDef . "}"    (rule 4)
	TypeDef -> TypeDef . ";" TypeCons                   (rule 59)

	";"            shift, and enter state 98
	"}"            shift, and enter state 143


State 142

	TypeCons -> type "(" TypeArgs ")" .                 (rule 61)

	";"            reduce using rule 61
	"}"            reduce using rule 61


State 143

	Stm -> type "<" ident ">" "::=" "{" TypeDef "}" .    (rule 4)

	ident          reduce using rule 4
	type           reduce using rule 4
	%eof           reduce using rule 4


State 144

	Pattern1 -> Args "=>" "{" Exps . "}"                (rule 48)
	Exps -> Exps . ";" Exp                              (rule 53)

	";"            shift, and enter state 73
	"}"            shift, and enter state 149


State 145

	Exp -> for ident in Exp "{" Exps . "}"              (rule 30)
	Exps -> Exps . ";" Exp                              (rule 53)

	";"            shift, and enter state 73
	"}"            shift, and enter state 148


State 146

	Exp -> Exp . binop Exp                              (rule 14)
	Case1 -> Exp "=>" Exp .                             (rule 44)

	";"            reduce using rule 44
	"}"            reduce using rule 44
	binop          shift, and enter state 65


State 147

	Case -> Case ";" Case1 .                            (rule 43)

	";"            reduce using rule 43
	"}"            reduce using rule 43


State 148

	Exp -> for ident in Exp "{" Exps "}" .              (rule 30)

	"=>"           reduce using rule 30
	":"            reduce using rule 30
	";"            reduce using rule 30
	","            reduce using rule 30
	")"            reduce using rule 30
	"{"            reduce using rule 30
	"}"            reduce using rule 30
	"]"            reduce using rule 30
	ident          reduce using rule 30
	type           reduce using rule 30
	binop          reduce using rule 30
	%eof           reduce using rule 30


State 149

	Pattern1 -> Args "=>" "{" Exps "}" .                (rule 48)

	";"            reduce using rule 48
	"}"            reduce using rule 48


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 67
Number of terminals: 30
Number of non-terminals: 19
Number of states: 150
