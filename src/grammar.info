-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from grammar.y
-----------------------------------------------------------------------------

state 23 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Stms                                (0)
	Stms -> Stms Stm                                   (1)
	Stms -> Stm                                        (2)
	Stm -> type "::=" "{" TypeDef "}"                  (3)
	Stm -> ident ":" Type                              (4)
	Stm -> ident ":" Types "{" Exps "}"                (5)
	Stm -> ident ":" Type "{" Pattern "}"              (6)
	Stm -> ident "=" Exp                               (7)
	Stm -> ident "=" Exp ":" Type                      (8)
	Stm -> ident "=" "{" Exps "}"                      (9)
	Stm -> ident "=" "{" Exps "}" ":" Type             (10)
	Exp -> "(" Exp ")"                                 (11)
	Exp -> "(" ")"                                     (12)
	Exp -> Exp binop Exp                               (13)
	Exp -> ident "<-" Exp                              (14)
	Exp -> ident                                       (15)
	Exp -> ident "->" Exp                              (16)
	Exp -> Const                                       (17)
	Exp -> ident "(" Args ")"                          (18)
	Exp -> macro "(" Args ")"                          (19)
	Exp -> type                                        (20)
	Exp -> type "(" Args ")"                           (21)
	Exp -> case Exp "{" Case "}"                       (22)
	Exp -> hole                                        (23)
	Args ->                                            (24)
	Args -> Exp                                        (25)
	Args -> Args "," Exp                               (26)
	Case -> Case1                                      (27)
	Case -> Case ";" Case1                             (28)
	Case1 -> Exp "=>" Exp                              (29)
	Pattern -> Pattern1                                (30)
	Pattern -> Pattern ";" Pattern1                    (31)
	Pattern1 -> Exp "=>" Exp                           (32)
	Const -> int                                       (33)
	Const -> str                                       (34)
	Const -> chr                                       (35)
	Exps -> Exp                                        (36)
	Exps -> Exps ";" Exp                               (37)
	Types -> type                                      (38)
	Types -> "(" ")"                                   (39)
	TypeDef -> Types                                   (40)
	TypeDef -> TypeDef ";" Types                       (41)
	Type -> Types                                      (42)
	Type -> Type "->" Types                            (43)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"->"           { TokenArrow       _ }
	"=>"           { TokenDoubleArrow _ }
	"<-"           { TokenLeftArrow   _ }
	"::="          { TokenData        _ }
	":"            { TokenTypeSign    _ }
	";"            { TokenSemi        _ }
	","            { TokenComma       _ }
	str            { TokenString _ $$ }
	chr            { TokenChar   _ $$ }
	"="            { TokenAssign      _ }
	"("            { TokenLParen      _ }
	")"            { TokenRParen      _ }
	"{"            { TokenLBracket    _ }
	"}"            { TokenRBracket    _ }
	ident          { TokenIdent _ $$ }
	macro          { TokenMacroCall _ $$ }
	int            { TokenInt   _ $$ }
	type           { TokenType  _ $$ }
	hole           { TokenHole  _ $$ }
	case           { Builtin _ "case" }
	binop          { BinOp _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Stms            rules 1, 2
	Stm             rules 3, 4, 5, 6, 7, 8, 9, 10
	Exp             rules 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
	Args            rules 24, 25, 26
	Case            rules 27, 28
	Case1           rule  29
	Pattern         rules 30, 31
	Pattern1        rule  32
	Const           rules 33, 34, 35
	Exps            rules 36, 37
	Types           rules 38, 39
	TypeDef         rules 40, 41
	Type            rules 42, 43

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Stms                               (rule 0)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 6
	Stm            goto state 3

State 1

	Stms -> . Stms Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 2
	Stm            goto state 3

State 2

	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stm            goto state 7

State 3

	Stms -> Stm .                                       (rule 2)

	ident          reduce using rule 2
	type           reduce using rule 2
	%eof           reduce using rule 2


State 4

	Stm -> ident . ":" Type                             (rule 4)
	Stm -> ident . ":" Types "{" Exps "}"               (rule 5)
	Stm -> ident . ":" Type "{" Pattern "}"             (rule 6)
	Stm -> ident . "=" Exp                              (rule 7)
	Stm -> ident . "=" Exp ":" Type                     (rule 8)
	Stm -> ident . "=" "{" Exps "}"                     (rule 9)
	Stm -> ident . "=" "{" Exps "}" ":" Type            (rule 10)

	":"            shift, and enter state 9
	"="            shift, and enter state 10


State 5

	Stm -> type . "::=" "{" TypeDef "}"                 (rule 3)

	"::="          shift, and enter state 8


State 6

	%start_calc -> Stms .                               (rule 0)
	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5
	%eof           accept

	Stm            goto state 7

State 7

	Stms -> Stms Stm .                                  (rule 1)

	ident          reduce using rule 1
	type           reduce using rule 1
	%eof           reduce using rule 1


State 8

	Stm -> type "::=" . "{" TypeDef "}"                 (rule 3)

	"{"            shift, and enter state 27


State 9

	Stm -> ident ":" . Type                             (rule 4)
	Stm -> ident ":" . Types "{" Exps "}"               (rule 5)
	Stm -> ident ":" . Type "{" Pattern "}"             (rule 6)

	"("            shift, and enter state 25
	type           shift, and enter state 26

	Types          goto state 23
	Type           goto state 24

State 10

	Stm -> ident "=" . Exp                              (rule 7)
	Stm -> ident "=" . Exp ":" Type                     (rule 8)
	Stm -> ident "=" . "{" Exps "}"                     (rule 9)
	Stm -> ident "=" . "{" Exps "}" ":" Type            (rule 10)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 11
	Const          goto state 12

State 11

	Stm -> ident "=" Exp .                              (rule 7)
	Stm -> ident "=" Exp . ":" Type                     (rule 8)
	Exp -> Exp . binop Exp                              (rule 13)

	":"            shift, and enter state 44
	ident          reduce using rule 7
	type           reduce using rule 7
	binop          shift, and enter state 45
	%eof           reduce using rule 7


State 12

	Exp -> Const .                                      (rule 17)

	"=>"           reduce using rule 17
	":"            reduce using rule 17
	";"            reduce using rule 17
	","            reduce using rule 17
	")"            reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	ident          reduce using rule 17
	type           reduce using rule 17
	binop          reduce using rule 17
	%eof           reduce using rule 17


State 13

	Const -> str .                                      (rule 34)

	"=>"           reduce using rule 34
	":"            reduce using rule 34
	";"            reduce using rule 34
	","            reduce using rule 34
	")"            reduce using rule 34
	"{"            reduce using rule 34
	"}"            reduce using rule 34
	ident          reduce using rule 34
	type           reduce using rule 34
	binop          reduce using rule 34
	%eof           reduce using rule 34


State 14

	Const -> chr .                                      (rule 35)

	"=>"           reduce using rule 35
	":"            reduce using rule 35
	";"            reduce using rule 35
	","            reduce using rule 35
	")"            reduce using rule 35
	"{"            reduce using rule 35
	"}"            reduce using rule 35
	ident          reduce using rule 35
	type           reduce using rule 35
	binop          reduce using rule 35
	%eof           reduce using rule 35


State 15

	Exp -> "(" . Exp ")"                                (rule 11)
	Exp -> "(" . ")"                                    (rule 12)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            shift, and enter state 43
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 42
	Const          goto state 12

State 16

	Stm -> ident "=" "{" . Exps "}"                     (rule 9)
	Stm -> ident "=" "{" . Exps "}" ":" Type            (rule 10)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 40
	Const          goto state 12
	Exps           goto state 41

State 17

	Exp -> ident . "<-" Exp                             (rule 14)
	Exp -> ident .                                      (rule 15)
	Exp -> ident . "->" Exp                             (rule 16)
	Exp -> ident . "(" Args ")"                         (rule 18)

	"->"           shift, and enter state 37
	"=>"           reduce using rule 15
	"<-"           shift, and enter state 38
	":"            reduce using rule 15
	";"            reduce using rule 15
	","            reduce using rule 15
	"("            shift, and enter state 39
	")"            reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	ident          reduce using rule 15
	type           reduce using rule 15
	binop          reduce using rule 15
	%eof           reduce using rule 15


State 18

	Exp -> macro . "(" Args ")"                         (rule 19)

	"("            shift, and enter state 36


State 19

	Const -> int .                                      (rule 33)

	"=>"           reduce using rule 33
	":"            reduce using rule 33
	";"            reduce using rule 33
	","            reduce using rule 33
	")"            reduce using rule 33
	"{"            reduce using rule 33
	"}"            reduce using rule 33
	ident          reduce using rule 33
	type           reduce using rule 33
	binop          reduce using rule 33
	%eof           reduce using rule 33


State 20

	Exp -> type .                                       (rule 20)
	Exp -> type . "(" Args ")"                          (rule 21)

	"=>"           reduce using rule 20
	":"            reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20
	"("            shift, and enter state 35
	")"            reduce using rule 20
	"{"            reduce using rule 20
	"}"            reduce using rule 20
	ident          reduce using rule 20
	type           reduce using rule 20
	binop          reduce using rule 20
	%eof           reduce using rule 20


State 21

	Exp -> hole .                                       (rule 23)

	"=>"           reduce using rule 23
	":"            reduce using rule 23
	";"            reduce using rule 23
	","            reduce using rule 23
	")"            reduce using rule 23
	"{"            reduce using rule 23
	"}"            reduce using rule 23
	ident          reduce using rule 23
	type           reduce using rule 23
	binop          reduce using rule 23
	%eof           reduce using rule 23


State 22

	Exp -> case . Exp "{" Case "}"                      (rule 22)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 34
	Const          goto state 12

State 23

	Stm -> ident ":" Types . "{" Exps "}"               (rule 5)
	Type -> Types .                                     (rule 42)

	"->"           reduce using rule 42
	"{"            shift, and enter state 33
			(reduce using rule 42)

	ident          reduce using rule 42
	type           reduce using rule 42
	%eof           reduce using rule 42


State 24

	Stm -> ident ":" Type .                             (rule 4)
	Stm -> ident ":" Type . "{" Pattern "}"             (rule 6)
	Type -> Type . "->" Types                           (rule 43)

	"->"           shift, and enter state 31
	"{"            shift, and enter state 32
	ident          reduce using rule 4
	type           reduce using rule 4
	%eof           reduce using rule 4


State 25

	Types -> "(" . ")"                                  (rule 39)

	")"            shift, and enter state 30


State 26

	Types -> type .                                     (rule 38)

	"->"           reduce using rule 38
	";"            reduce using rule 38
	"{"            reduce using rule 38
	"}"            reduce using rule 38
	ident          reduce using rule 38
	type           reduce using rule 38
	%eof           reduce using rule 38


State 27

	Stm -> type "::=" "{" . TypeDef "}"                 (rule 3)

	"("            shift, and enter state 25
	type           shift, and enter state 26

	Types          goto state 28
	TypeDef        goto state 29

State 28

	TypeDef -> Types .                                  (rule 40)

	";"            reduce using rule 40
	"}"            reduce using rule 40


State 29

	Stm -> type "::=" "{" TypeDef . "}"                 (rule 3)
	TypeDef -> TypeDef . ";" Types                      (rule 41)

	";"            shift, and enter state 64
	"}"            shift, and enter state 65


State 30

	Types -> "(" ")" .                                  (rule 39)

	"->"           reduce using rule 39
	";"            reduce using rule 39
	"{"            reduce using rule 39
	"}"            reduce using rule 39
	ident          reduce using rule 39
	type           reduce using rule 39
	%eof           reduce using rule 39


State 31

	Type -> Type "->" . Types                           (rule 43)

	"("            shift, and enter state 25
	type           shift, and enter state 26

	Types          goto state 63

State 32

	Stm -> ident ":" Type "{" . Pattern "}"             (rule 6)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 60
	Pattern        goto state 61
	Pattern1       goto state 62
	Const          goto state 12

State 33

	Stm -> ident ":" Types "{" . Exps "}"               (rule 5)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 40
	Const          goto state 12
	Exps           goto state 59

State 34

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> case Exp . "{" Case "}"                      (rule 22)

	"{"            shift, and enter state 58
	binop          shift, and enter state 45


State 35

	Exp -> type "(" . Args ")"                          (rule 21)

	","            reduce using rule 24
	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            reduce using rule 24
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 52
	Args           goto state 57
	Const          goto state 12

State 36

	Exp -> macro "(" . Args ")"                         (rule 19)

	","            reduce using rule 24
	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            reduce using rule 24
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 52
	Args           goto state 56
	Const          goto state 12

State 37

	Exp -> ident "->" . Exp                             (rule 16)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 55
	Const          goto state 12

State 38

	Exp -> ident "<-" . Exp                             (rule 14)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 54
	Const          goto state 12

State 39

	Exp -> ident "(" . Args ")"                         (rule 18)

	","            reduce using rule 24
	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            reduce using rule 24
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 52
	Args           goto state 53
	Const          goto state 12

State 40

	Exp -> Exp . binop Exp                              (rule 13)
	Exps -> Exp .                                       (rule 36)

	";"            reduce using rule 36
	"}"            reduce using rule 36
	binop          shift, and enter state 45


State 41

	Stm -> ident "=" "{" Exps . "}"                     (rule 9)
	Stm -> ident "=" "{" Exps . "}" ":" Type            (rule 10)
	Exps -> Exps . ";" Exp                              (rule 37)

	";"            shift, and enter state 50
	"}"            shift, and enter state 51


State 42

	Exp -> "(" Exp . ")"                                (rule 11)
	Exp -> Exp . binop Exp                              (rule 13)

	")"            shift, and enter state 49
	binop          shift, and enter state 45


State 43

	Exp -> "(" ")" .                                    (rule 12)

	"=>"           reduce using rule 12
	":"            reduce using rule 12
	";"            reduce using rule 12
	","            reduce using rule 12
	")"            reduce using rule 12
	"{"            reduce using rule 12
	"}"            reduce using rule 12
	ident          reduce using rule 12
	type           reduce using rule 12
	binop          reduce using rule 12
	%eof           reduce using rule 12


State 44

	Stm -> ident "=" Exp ":" . Type                     (rule 8)

	"("            shift, and enter state 25
	type           shift, and enter state 26

	Types          goto state 47
	Type           goto state 48

State 45

	Exp -> Exp binop . Exp                              (rule 13)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 46
	Const          goto state 12

State 46

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> Exp binop Exp .                              (rule 13)

	"=>"           reduce using rule 13
	":"            reduce using rule 13
	";"            reduce using rule 13
	","            reduce using rule 13
	")"            reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	ident          reduce using rule 13
	type           reduce using rule 13
	binop          reduce using rule 13
	%eof           reduce using rule 13


State 47

	Type -> Types .                                     (rule 42)

	"->"           reduce using rule 42
	ident          reduce using rule 42
	type           reduce using rule 42
	%eof           reduce using rule 42


State 48

	Stm -> ident "=" Exp ":" Type .                     (rule 8)
	Type -> Type . "->" Types                           (rule 43)

	"->"           shift, and enter state 31
	ident          reduce using rule 8
	type           reduce using rule 8
	%eof           reduce using rule 8


State 49

	Exp -> "(" Exp ")" .                                (rule 11)

	"=>"           reduce using rule 11
	":"            reduce using rule 11
	";"            reduce using rule 11
	","            reduce using rule 11
	")"            reduce using rule 11
	"{"            reduce using rule 11
	"}"            reduce using rule 11
	ident          reduce using rule 11
	type           reduce using rule 11
	binop          reduce using rule 11
	%eof           reduce using rule 11


State 50

	Exps -> Exps ";" . Exp                              (rule 37)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 79
	Const          goto state 12

State 51

	Stm -> ident "=" "{" Exps "}" .                     (rule 9)
	Stm -> ident "=" "{" Exps "}" . ":" Type            (rule 10)

	":"            shift, and enter state 78
	ident          reduce using rule 9
	type           reduce using rule 9
	%eof           reduce using rule 9


State 52

	Exp -> Exp . binop Exp                              (rule 13)
	Args -> Exp .                                       (rule 25)

	","            reduce using rule 25
	")"            reduce using rule 25
	binop          shift, and enter state 45


State 53

	Exp -> ident "(" Args . ")"                         (rule 18)
	Args -> Args . "," Exp                              (rule 26)

	","            shift, and enter state 74
	")"            shift, and enter state 77


State 54

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> ident "<-" Exp .                             (rule 14)

	"=>"           reduce using rule 14
	":"            reduce using rule 14
	";"            reduce using rule 14
	","            reduce using rule 14
	")"            reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	ident          reduce using rule 14
	type           reduce using rule 14
	binop          shift, and enter state 45
	%eof           reduce using rule 14


State 55

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> ident "->" Exp .                             (rule 16)

	"=>"           reduce using rule 16
	":"            reduce using rule 16
	";"            reduce using rule 16
	","            reduce using rule 16
	")"            reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	ident          reduce using rule 16
	type           reduce using rule 16
	binop          shift, and enter state 45
	%eof           reduce using rule 16


State 56

	Exp -> macro "(" Args . ")"                         (rule 19)
	Args -> Args . "," Exp                              (rule 26)

	","            shift, and enter state 74
	")"            shift, and enter state 76


State 57

	Exp -> type "(" Args . ")"                          (rule 21)
	Args -> Args . "," Exp                              (rule 26)

	","            shift, and enter state 74
	")"            shift, and enter state 75


State 58

	Exp -> case Exp "{" . Case "}"                      (rule 22)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 71
	Case           goto state 72
	Case1          goto state 73
	Const          goto state 12

State 59

	Stm -> ident ":" Types "{" Exps . "}"               (rule 5)
	Exps -> Exps . ";" Exp                              (rule 37)

	";"            shift, and enter state 50
	"}"            shift, and enter state 70


State 60

	Exp -> Exp . binop Exp                              (rule 13)
	Pattern1 -> Exp . "=>" Exp                          (rule 32)

	"=>"           shift, and enter state 69
	binop          shift, and enter state 45


State 61

	Stm -> ident ":" Type "{" Pattern . "}"             (rule 6)
	Pattern -> Pattern . ";" Pattern1                   (rule 31)

	";"            shift, and enter state 67
	"}"            shift, and enter state 68


State 62

	Pattern -> Pattern1 .                               (rule 30)

	";"            reduce using rule 30
	"}"            reduce using rule 30


State 63

	Type -> Type "->" Types .                           (rule 43)

	"->"           reduce using rule 43
	"{"            reduce using rule 43
	ident          reduce using rule 43
	type           reduce using rule 43
	%eof           reduce using rule 43


State 64

	TypeDef -> TypeDef ";" . Types                      (rule 41)

	"("            shift, and enter state 25
	type           shift, and enter state 26

	Types          goto state 66

State 65

	Stm -> type "::=" "{" TypeDef "}" .                 (rule 3)

	ident          reduce using rule 3
	type           reduce using rule 3
	%eof           reduce using rule 3


State 66

	TypeDef -> TypeDef ";" Types .                      (rule 41)

	";"            reduce using rule 41
	"}"            reduce using rule 41


State 67

	Pattern -> Pattern ";" . Pattern1                   (rule 31)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 60
	Pattern1       goto state 86
	Const          goto state 12

State 68

	Stm -> ident ":" Type "{" Pattern "}" .             (rule 6)

	ident          reduce using rule 6
	type           reduce using rule 6
	%eof           reduce using rule 6


State 69

	Pattern1 -> Exp "=>" . Exp                          (rule 32)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 85
	Const          goto state 12

State 70

	Stm -> ident ":" Types "{" Exps "}" .               (rule 5)

	ident          reduce using rule 5
	type           reduce using rule 5
	%eof           reduce using rule 5


State 71

	Exp -> Exp . binop Exp                              (rule 13)
	Case1 -> Exp . "=>" Exp                             (rule 29)

	"=>"           shift, and enter state 84
	binop          shift, and enter state 45


State 72

	Exp -> case Exp "{" Case . "}"                      (rule 22)
	Case -> Case . ";" Case1                            (rule 28)

	";"            shift, and enter state 82
	"}"            shift, and enter state 83


State 73

	Case -> Case1 .                                     (rule 27)

	";"            reduce using rule 27
	"}"            reduce using rule 27


State 74

	Args -> Args "," . Exp                              (rule 26)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 81
	Const          goto state 12

State 75

	Exp -> type "(" Args ")" .                          (rule 21)

	"=>"           reduce using rule 21
	":"            reduce using rule 21
	";"            reduce using rule 21
	","            reduce using rule 21
	")"            reduce using rule 21
	"{"            reduce using rule 21
	"}"            reduce using rule 21
	ident          reduce using rule 21
	type           reduce using rule 21
	binop          reduce using rule 21
	%eof           reduce using rule 21


State 76

	Exp -> macro "(" Args ")" .                         (rule 19)

	"=>"           reduce using rule 19
	":"            reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19
	")"            reduce using rule 19
	"{"            reduce using rule 19
	"}"            reduce using rule 19
	ident          reduce using rule 19
	type           reduce using rule 19
	binop          reduce using rule 19
	%eof           reduce using rule 19


State 77

	Exp -> ident "(" Args ")" .                         (rule 18)

	"=>"           reduce using rule 18
	":"            reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18
	")"            reduce using rule 18
	"{"            reduce using rule 18
	"}"            reduce using rule 18
	ident          reduce using rule 18
	type           reduce using rule 18
	binop          reduce using rule 18
	%eof           reduce using rule 18


State 78

	Stm -> ident "=" "{" Exps "}" ":" . Type            (rule 10)

	"("            shift, and enter state 25
	type           shift, and enter state 26

	Types          goto state 47
	Type           goto state 80

State 79

	Exp -> Exp . binop Exp                              (rule 13)
	Exps -> Exps ";" Exp .                              (rule 37)

	";"            reduce using rule 37
	"}"            reduce using rule 37
	binop          shift, and enter state 45


State 80

	Stm -> ident "=" "{" Exps "}" ":" Type .            (rule 10)
	Type -> Type . "->" Types                           (rule 43)

	"->"           shift, and enter state 31
	ident          reduce using rule 10
	type           reduce using rule 10
	%eof           reduce using rule 10


State 81

	Exp -> Exp . binop Exp                              (rule 13)
	Args -> Args "," Exp .                              (rule 26)

	","            reduce using rule 26
	")"            reduce using rule 26
	binop          shift, and enter state 45


State 82

	Case -> Case ";" . Case1                            (rule 28)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 71
	Case1          goto state 88
	Const          goto state 12

State 83

	Exp -> case Exp "{" Case "}" .                      (rule 22)

	"=>"           reduce using rule 22
	":"            reduce using rule 22
	";"            reduce using rule 22
	","            reduce using rule 22
	")"            reduce using rule 22
	"{"            reduce using rule 22
	"}"            reduce using rule 22
	ident          reduce using rule 22
	type           reduce using rule 22
	binop          reduce using rule 22
	%eof           reduce using rule 22


State 84

	Case1 -> Exp "=>" . Exp                             (rule 29)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	macro          shift, and enter state 18
	int            shift, and enter state 19
	type           shift, and enter state 20
	hole           shift, and enter state 21
	case           shift, and enter state 22

	Exp            goto state 87
	Const          goto state 12

State 85

	Exp -> Exp . binop Exp                              (rule 13)
	Pattern1 -> Exp "=>" Exp .                          (rule 32)

	";"            reduce using rule 32
	"}"            reduce using rule 32
	binop          shift, and enter state 45


State 86

	Pattern -> Pattern ";" Pattern1 .                   (rule 31)

	";"            reduce using rule 31
	"}"            reduce using rule 31


State 87

	Exp -> Exp . binop Exp                              (rule 13)
	Case1 -> Exp "=>" Exp .                             (rule 29)

	";"            reduce using rule 29
	"}"            reduce using rule 29
	binop          shift, and enter state 45


State 88

	Case -> Case ";" Case1 .                            (rule 28)

	";"            reduce using rule 28
	"}"            reduce using rule 28


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 44
Number of terminals: 21
Number of non-terminals: 14
Number of states: 89
