-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from grammar.y
-----------------------------------------------------------------------------

state 22 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Stms                                (0)
	Stms -> Stms Stm                                   (1)
	Stms -> Stm                                        (2)
	Stm -> type "::=" "{" TypeDef "}"                  (3)
	Stm -> ident ":" Type                              (4)
	Stm -> ident ":" Types "{" Exps "}"                (5)
	Stm -> ident ":" Type "{" Pattern "}"              (6)
	Stm -> ident "=" Exp                               (7)
	Stm -> ident "=" Exp ":" Type                      (8)
	Stm -> ident "=" "{" Exps "}"                      (9)
	Stm -> ident "=" "{" Exps "}" ":" Type             (10)
	Exp -> "(" Exp ")"                                 (11)
	Exp -> "(" ")"                                     (12)
	Exp -> Exp binop Exp                               (13)
	Exp -> ident "<-" Exp                              (14)
	Exp -> ident                                       (15)
	Exp -> ident "->" Exp                              (16)
	Exp -> Const                                       (17)
	Exp -> ident "(" Args ")"                          (18)
	Exp -> type                                        (19)
	Exp -> type "(" Args ")"                           (20)
	Exp -> case Exp "{" Case "}"                       (21)
	Exp -> hole                                        (22)
	Args ->                                            (23)
	Args -> Exp                                        (24)
	Args -> Args "," Exp                               (25)
	Case -> Case1                                      (26)
	Case -> Case ";" Case1                             (27)
	Case1 -> Exp "=>" Exp                              (28)
	Pattern -> Pattern1                                (29)
	Pattern -> Pattern ";" Pattern1                    (30)
	Pattern1 -> Exp "=>" Exp                           (31)
	Const -> int                                       (32)
	Const -> str                                       (33)
	Const -> chr                                       (34)
	Exps -> Exp                                        (35)
	Exps -> Exps ";" Exp                               (36)
	Types -> type                                      (37)
	Types -> "(" ")"                                   (38)
	TypeDef -> Types                                   (39)
	TypeDef -> TypeDef ";" Types                       (40)
	Type -> Types                                      (41)
	Type -> Type "->" Types                            (42)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"->"           { TokenArrow       _ }
	"=>"           { TokenDoubleArrow _ }
	"<-"           { TokenLeftArrow   _ }
	"::="          { TokenData        _ }
	":"            { TokenTypeSign    _ }
	";"            { TokenSemi        _ }
	","            { TokenComma       _ }
	str            { TokenString _ $$ }
	chr            { TokenChar   _ $$ }
	"="            { TokenAssign      _ }
	"("            { TokenLParen      _ }
	")"            { TokenRParen      _ }
	"{"            { TokenLBracket    _ }
	"}"            { TokenRBracket    _ }
	ident          { TokenIdent _ $$ }
	int            { TokenInt   _ $$ }
	type           { TokenType  _ $$ }
	hole           { TokenHole  _ $$ }
	case           { Builtin _ "case" }
	binop          { BinOp _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Stms            rules 1, 2
	Stm             rules 3, 4, 5, 6, 7, 8, 9, 10
	Exp             rules 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
	Args            rules 23, 24, 25
	Case            rules 26, 27
	Case1           rule  28
	Pattern         rules 29, 30
	Pattern1        rule  31
	Const           rules 32, 33, 34
	Exps            rules 35, 36
	Types           rules 37, 38
	TypeDef         rules 39, 40
	Type            rules 41, 42

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Stms                               (rule 0)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 6
	Stm            goto state 3

State 1

	Stms -> . Stms Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stms           goto state 2
	Stm            goto state 3

State 2

	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5

	Stm            goto state 7

State 3

	Stms -> Stm .                                       (rule 2)

	ident          reduce using rule 2
	type           reduce using rule 2
	%eof           reduce using rule 2


State 4

	Stm -> ident . ":" Type                             (rule 4)
	Stm -> ident . ":" Types "{" Exps "}"               (rule 5)
	Stm -> ident . ":" Type "{" Pattern "}"             (rule 6)
	Stm -> ident . "=" Exp                              (rule 7)
	Stm -> ident . "=" Exp ":" Type                     (rule 8)
	Stm -> ident . "=" "{" Exps "}"                     (rule 9)
	Stm -> ident . "=" "{" Exps "}" ":" Type            (rule 10)

	":"            shift, and enter state 9
	"="            shift, and enter state 10


State 5

	Stm -> type . "::=" "{" TypeDef "}"                 (rule 3)

	"::="          shift, and enter state 8


State 6

	%start_calc -> Stms .                               (rule 0)
	Stms -> Stms . Stm                                  (rule 1)

	ident          shift, and enter state 4
	type           shift, and enter state 5
	%eof           accept

	Stm            goto state 7

State 7

	Stms -> Stms Stm .                                  (rule 1)

	ident          reduce using rule 1
	type           reduce using rule 1
	%eof           reduce using rule 1


State 8

	Stm -> type "::=" . "{" TypeDef "}"                 (rule 3)

	"{"            shift, and enter state 26


State 9

	Stm -> ident ":" . Type                             (rule 4)
	Stm -> ident ":" . Types "{" Exps "}"               (rule 5)
	Stm -> ident ":" . Type "{" Pattern "}"             (rule 6)

	"("            shift, and enter state 24
	type           shift, and enter state 25

	Types          goto state 22
	Type           goto state 23

State 10

	Stm -> ident "=" . Exp                              (rule 7)
	Stm -> ident "=" . Exp ":" Type                     (rule 8)
	Stm -> ident "=" . "{" Exps "}"                     (rule 9)
	Stm -> ident "=" . "{" Exps "}" ":" Type            (rule 10)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 11
	Const          goto state 12

State 11

	Stm -> ident "=" Exp .                              (rule 7)
	Stm -> ident "=" Exp . ":" Type                     (rule 8)
	Exp -> Exp . binop Exp                              (rule 13)

	":"            shift, and enter state 42
	ident          reduce using rule 7
	type           reduce using rule 7
	binop          shift, and enter state 43
	%eof           reduce using rule 7


State 12

	Exp -> Const .                                      (rule 17)

	"=>"           reduce using rule 17
	":"            reduce using rule 17
	";"            reduce using rule 17
	","            reduce using rule 17
	")"            reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	ident          reduce using rule 17
	type           reduce using rule 17
	binop          reduce using rule 17
	%eof           reduce using rule 17


State 13

	Const -> str .                                      (rule 33)

	"=>"           reduce using rule 33
	":"            reduce using rule 33
	";"            reduce using rule 33
	","            reduce using rule 33
	")"            reduce using rule 33
	"{"            reduce using rule 33
	"}"            reduce using rule 33
	ident          reduce using rule 33
	type           reduce using rule 33
	binop          reduce using rule 33
	%eof           reduce using rule 33


State 14

	Const -> chr .                                      (rule 34)

	"=>"           reduce using rule 34
	":"            reduce using rule 34
	";"            reduce using rule 34
	","            reduce using rule 34
	")"            reduce using rule 34
	"{"            reduce using rule 34
	"}"            reduce using rule 34
	ident          reduce using rule 34
	type           reduce using rule 34
	binop          reduce using rule 34
	%eof           reduce using rule 34


State 15

	Exp -> "(" . Exp ")"                                (rule 11)
	Exp -> "(" . ")"                                    (rule 12)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            shift, and enter state 41
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 40
	Const          goto state 12

State 16

	Stm -> ident "=" "{" . Exps "}"                     (rule 9)
	Stm -> ident "=" "{" . Exps "}" ":" Type            (rule 10)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 38
	Const          goto state 12
	Exps           goto state 39

State 17

	Exp -> ident . "<-" Exp                             (rule 14)
	Exp -> ident .                                      (rule 15)
	Exp -> ident . "->" Exp                             (rule 16)
	Exp -> ident . "(" Args ")"                         (rule 18)

	"->"           shift, and enter state 35
	"=>"           reduce using rule 15
	"<-"           shift, and enter state 36
	":"            reduce using rule 15
	";"            reduce using rule 15
	","            reduce using rule 15
	"("            shift, and enter state 37
	")"            reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	ident          reduce using rule 15
	type           reduce using rule 15
	binop          reduce using rule 15
	%eof           reduce using rule 15


State 18

	Const -> int .                                      (rule 32)

	"=>"           reduce using rule 32
	":"            reduce using rule 32
	";"            reduce using rule 32
	","            reduce using rule 32
	")"            reduce using rule 32
	"{"            reduce using rule 32
	"}"            reduce using rule 32
	ident          reduce using rule 32
	type           reduce using rule 32
	binop          reduce using rule 32
	%eof           reduce using rule 32


State 19

	Exp -> type .                                       (rule 19)
	Exp -> type . "(" Args ")"                          (rule 20)

	"=>"           reduce using rule 19
	":"            reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19
	"("            shift, and enter state 34
	")"            reduce using rule 19
	"{"            reduce using rule 19
	"}"            reduce using rule 19
	ident          reduce using rule 19
	type           reduce using rule 19
	binop          reduce using rule 19
	%eof           reduce using rule 19


State 20

	Exp -> hole .                                       (rule 22)

	"=>"           reduce using rule 22
	":"            reduce using rule 22
	";"            reduce using rule 22
	","            reduce using rule 22
	")"            reduce using rule 22
	"{"            reduce using rule 22
	"}"            reduce using rule 22
	ident          reduce using rule 22
	type           reduce using rule 22
	binop          reduce using rule 22
	%eof           reduce using rule 22


State 21

	Exp -> case . Exp "{" Case "}"                      (rule 21)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 33
	Const          goto state 12

State 22

	Stm -> ident ":" Types . "{" Exps "}"               (rule 5)
	Type -> Types .                                     (rule 41)

	"->"           reduce using rule 41
	"{"            shift, and enter state 32
			(reduce using rule 41)

	ident          reduce using rule 41
	type           reduce using rule 41
	%eof           reduce using rule 41


State 23

	Stm -> ident ":" Type .                             (rule 4)
	Stm -> ident ":" Type . "{" Pattern "}"             (rule 6)
	Type -> Type . "->" Types                           (rule 42)

	"->"           shift, and enter state 30
	"{"            shift, and enter state 31
	ident          reduce using rule 4
	type           reduce using rule 4
	%eof           reduce using rule 4


State 24

	Types -> "(" . ")"                                  (rule 38)

	")"            shift, and enter state 29


State 25

	Types -> type .                                     (rule 37)

	"->"           reduce using rule 37
	";"            reduce using rule 37
	"{"            reduce using rule 37
	"}"            reduce using rule 37
	ident          reduce using rule 37
	type           reduce using rule 37
	%eof           reduce using rule 37


State 26

	Stm -> type "::=" "{" . TypeDef "}"                 (rule 3)

	"("            shift, and enter state 24
	type           shift, and enter state 25

	Types          goto state 27
	TypeDef        goto state 28

State 27

	TypeDef -> Types .                                  (rule 39)

	";"            reduce using rule 39
	"}"            reduce using rule 39


State 28

	Stm -> type "::=" "{" TypeDef . "}"                 (rule 3)
	TypeDef -> TypeDef . ";" Types                      (rule 40)

	";"            shift, and enter state 61
	"}"            shift, and enter state 62


State 29

	Types -> "(" ")" .                                  (rule 38)

	"->"           reduce using rule 38
	";"            reduce using rule 38
	"{"            reduce using rule 38
	"}"            reduce using rule 38
	ident          reduce using rule 38
	type           reduce using rule 38
	%eof           reduce using rule 38


State 30

	Type -> Type "->" . Types                           (rule 42)

	"("            shift, and enter state 24
	type           shift, and enter state 25

	Types          goto state 60

State 31

	Stm -> ident ":" Type "{" . Pattern "}"             (rule 6)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 57
	Pattern        goto state 58
	Pattern1       goto state 59
	Const          goto state 12

State 32

	Stm -> ident ":" Types "{" . Exps "}"               (rule 5)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 38
	Const          goto state 12
	Exps           goto state 56

State 33

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> case Exp . "{" Case "}"                      (rule 21)

	"{"            shift, and enter state 55
	binop          shift, and enter state 43


State 34

	Exp -> type "(" . Args ")"                          (rule 20)

	","            reduce using rule 23
	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            reduce using rule 23
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 50
	Args           goto state 54
	Const          goto state 12

State 35

	Exp -> ident "->" . Exp                             (rule 16)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 53
	Const          goto state 12

State 36

	Exp -> ident "<-" . Exp                             (rule 14)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 52
	Const          goto state 12

State 37

	Exp -> ident "(" . Args ")"                         (rule 18)

	","            reduce using rule 23
	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	")"            reduce using rule 23
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 50
	Args           goto state 51
	Const          goto state 12

State 38

	Exp -> Exp . binop Exp                              (rule 13)
	Exps -> Exp .                                       (rule 35)

	";"            reduce using rule 35
	"}"            reduce using rule 35
	binop          shift, and enter state 43


State 39

	Stm -> ident "=" "{" Exps . "}"                     (rule 9)
	Stm -> ident "=" "{" Exps . "}" ":" Type            (rule 10)
	Exps -> Exps . ";" Exp                              (rule 36)

	";"            shift, and enter state 48
	"}"            shift, and enter state 49


State 40

	Exp -> "(" Exp . ")"                                (rule 11)
	Exp -> Exp . binop Exp                              (rule 13)

	")"            shift, and enter state 47
	binop          shift, and enter state 43


State 41

	Exp -> "(" ")" .                                    (rule 12)

	"=>"           reduce using rule 12
	":"            reduce using rule 12
	";"            reduce using rule 12
	","            reduce using rule 12
	")"            reduce using rule 12
	"{"            reduce using rule 12
	"}"            reduce using rule 12
	ident          reduce using rule 12
	type           reduce using rule 12
	binop          reduce using rule 12
	%eof           reduce using rule 12


State 42

	Stm -> ident "=" Exp ":" . Type                     (rule 8)

	"("            shift, and enter state 24
	type           shift, and enter state 25

	Types          goto state 45
	Type           goto state 46

State 43

	Exp -> Exp binop . Exp                              (rule 13)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 44
	Const          goto state 12

State 44

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> Exp binop Exp .                              (rule 13)

	"=>"           reduce using rule 13
	":"            reduce using rule 13
	";"            reduce using rule 13
	","            reduce using rule 13
	")"            reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	ident          reduce using rule 13
	type           reduce using rule 13
	binop          reduce using rule 13
	%eof           reduce using rule 13


State 45

	Type -> Types .                                     (rule 41)

	"->"           reduce using rule 41
	ident          reduce using rule 41
	type           reduce using rule 41
	%eof           reduce using rule 41


State 46

	Stm -> ident "=" Exp ":" Type .                     (rule 8)
	Type -> Type . "->" Types                           (rule 42)

	"->"           shift, and enter state 30
	ident          reduce using rule 8
	type           reduce using rule 8
	%eof           reduce using rule 8


State 47

	Exp -> "(" Exp ")" .                                (rule 11)

	"=>"           reduce using rule 11
	":"            reduce using rule 11
	";"            reduce using rule 11
	","            reduce using rule 11
	")"            reduce using rule 11
	"{"            reduce using rule 11
	"}"            reduce using rule 11
	ident          reduce using rule 11
	type           reduce using rule 11
	binop          reduce using rule 11
	%eof           reduce using rule 11


State 48

	Exps -> Exps ";" . Exp                              (rule 36)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 75
	Const          goto state 12

State 49

	Stm -> ident "=" "{" Exps "}" .                     (rule 9)
	Stm -> ident "=" "{" Exps "}" . ":" Type            (rule 10)

	":"            shift, and enter state 74
	ident          reduce using rule 9
	type           reduce using rule 9
	%eof           reduce using rule 9


State 50

	Exp -> Exp . binop Exp                              (rule 13)
	Args -> Exp .                                       (rule 24)

	","            reduce using rule 24
	")"            reduce using rule 24
	binop          shift, and enter state 43


State 51

	Exp -> ident "(" Args . ")"                         (rule 18)
	Args -> Args . "," Exp                              (rule 25)

	","            shift, and enter state 71
	")"            shift, and enter state 73


State 52

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> ident "<-" Exp .                             (rule 14)

	"=>"           reduce using rule 14
	":"            reduce using rule 14
	";"            reduce using rule 14
	","            reduce using rule 14
	")"            reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	ident          reduce using rule 14
	type           reduce using rule 14
	binop          shift, and enter state 43
	%eof           reduce using rule 14


State 53

	Exp -> Exp . binop Exp                              (rule 13)
	Exp -> ident "->" Exp .                             (rule 16)

	"=>"           reduce using rule 16
	":"            reduce using rule 16
	";"            reduce using rule 16
	","            reduce using rule 16
	")"            reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	ident          reduce using rule 16
	type           reduce using rule 16
	binop          shift, and enter state 43
	%eof           reduce using rule 16


State 54

	Exp -> type "(" Args . ")"                          (rule 20)
	Args -> Args . "," Exp                              (rule 25)

	","            shift, and enter state 71
	")"            shift, and enter state 72


State 55

	Exp -> case Exp "{" . Case "}"                      (rule 21)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 68
	Case           goto state 69
	Case1          goto state 70
	Const          goto state 12

State 56

	Stm -> ident ":" Types "{" Exps . "}"               (rule 5)
	Exps -> Exps . ";" Exp                              (rule 36)

	";"            shift, and enter state 48
	"}"            shift, and enter state 67


State 57

	Exp -> Exp . binop Exp                              (rule 13)
	Pattern1 -> Exp . "=>" Exp                          (rule 31)

	"=>"           shift, and enter state 66
	binop          shift, and enter state 43


State 58

	Stm -> ident ":" Type "{" Pattern . "}"             (rule 6)
	Pattern -> Pattern . ";" Pattern1                   (rule 30)

	";"            shift, and enter state 64
	"}"            shift, and enter state 65


State 59

	Pattern -> Pattern1 .                               (rule 29)

	";"            reduce using rule 29
	"}"            reduce using rule 29


State 60

	Type -> Type "->" Types .                           (rule 42)

	"->"           reduce using rule 42
	"{"            reduce using rule 42
	ident          reduce using rule 42
	type           reduce using rule 42
	%eof           reduce using rule 42


State 61

	TypeDef -> TypeDef ";" . Types                      (rule 40)

	"("            shift, and enter state 24
	type           shift, and enter state 25

	Types          goto state 63

State 62

	Stm -> type "::=" "{" TypeDef "}" .                 (rule 3)

	ident          reduce using rule 3
	type           reduce using rule 3
	%eof           reduce using rule 3


State 63

	TypeDef -> TypeDef ";" Types .                      (rule 40)

	";"            reduce using rule 40
	"}"            reduce using rule 40


State 64

	Pattern -> Pattern ";" . Pattern1                   (rule 30)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 57
	Pattern1       goto state 82
	Const          goto state 12

State 65

	Stm -> ident ":" Type "{" Pattern "}" .             (rule 6)

	ident          reduce using rule 6
	type           reduce using rule 6
	%eof           reduce using rule 6


State 66

	Pattern1 -> Exp "=>" . Exp                          (rule 31)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 81
	Const          goto state 12

State 67

	Stm -> ident ":" Types "{" Exps "}" .               (rule 5)

	ident          reduce using rule 5
	type           reduce using rule 5
	%eof           reduce using rule 5


State 68

	Exp -> Exp . binop Exp                              (rule 13)
	Case1 -> Exp . "=>" Exp                             (rule 28)

	"=>"           shift, and enter state 80
	binop          shift, and enter state 43


State 69

	Exp -> case Exp "{" Case . "}"                      (rule 21)
	Case -> Case . ";" Case1                            (rule 27)

	";"            shift, and enter state 78
	"}"            shift, and enter state 79


State 70

	Case -> Case1 .                                     (rule 26)

	";"            reduce using rule 26
	"}"            reduce using rule 26


State 71

	Args -> Args "," . Exp                              (rule 25)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 77
	Const          goto state 12

State 72

	Exp -> type "(" Args ")" .                          (rule 20)

	"=>"           reduce using rule 20
	":"            reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20
	")"            reduce using rule 20
	"{"            reduce using rule 20
	"}"            reduce using rule 20
	ident          reduce using rule 20
	type           reduce using rule 20
	binop          reduce using rule 20
	%eof           reduce using rule 20


State 73

	Exp -> ident "(" Args ")" .                         (rule 18)

	"=>"           reduce using rule 18
	":"            reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18
	")"            reduce using rule 18
	"{"            reduce using rule 18
	"}"            reduce using rule 18
	ident          reduce using rule 18
	type           reduce using rule 18
	binop          reduce using rule 18
	%eof           reduce using rule 18


State 74

	Stm -> ident "=" "{" Exps "}" ":" . Type            (rule 10)

	"("            shift, and enter state 24
	type           shift, and enter state 25

	Types          goto state 45
	Type           goto state 76

State 75

	Exp -> Exp . binop Exp                              (rule 13)
	Exps -> Exps ";" Exp .                              (rule 36)

	";"            reduce using rule 36
	"}"            reduce using rule 36
	binop          shift, and enter state 43


State 76

	Stm -> ident "=" "{" Exps "}" ":" Type .            (rule 10)
	Type -> Type . "->" Types                           (rule 42)

	"->"           shift, and enter state 30
	ident          reduce using rule 10
	type           reduce using rule 10
	%eof           reduce using rule 10


State 77

	Exp -> Exp . binop Exp                              (rule 13)
	Args -> Args "," Exp .                              (rule 25)

	","            reduce using rule 25
	")"            reduce using rule 25
	binop          shift, and enter state 43


State 78

	Case -> Case ";" . Case1                            (rule 27)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 68
	Case1          goto state 84
	Const          goto state 12

State 79

	Exp -> case Exp "{" Case "}" .                      (rule 21)

	"=>"           reduce using rule 21
	":"            reduce using rule 21
	";"            reduce using rule 21
	","            reduce using rule 21
	")"            reduce using rule 21
	"{"            reduce using rule 21
	"}"            reduce using rule 21
	ident          reduce using rule 21
	type           reduce using rule 21
	binop          reduce using rule 21
	%eof           reduce using rule 21


State 80

	Case1 -> Exp "=>" . Exp                             (rule 28)

	str            shift, and enter state 13
	chr            shift, and enter state 14
	"("            shift, and enter state 15
	ident          shift, and enter state 17
	int            shift, and enter state 18
	type           shift, and enter state 19
	hole           shift, and enter state 20
	case           shift, and enter state 21

	Exp            goto state 83
	Const          goto state 12

State 81

	Exp -> Exp . binop Exp                              (rule 13)
	Pattern1 -> Exp "=>" Exp .                          (rule 31)

	";"            reduce using rule 31
	"}"            reduce using rule 31
	binop          shift, and enter state 43


State 82

	Pattern -> Pattern ";" Pattern1 .                   (rule 30)

	";"            reduce using rule 30
	"}"            reduce using rule 30


State 83

	Exp -> Exp . binop Exp                              (rule 13)
	Case1 -> Exp "=>" Exp .                             (rule 28)

	";"            reduce using rule 28
	"}"            reduce using rule 28
	binop          shift, and enter state 43


State 84

	Case -> Case ";" Case1 .                            (rule 27)

	";"            reduce using rule 27
	"}"            reduce using rule 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 43
Number of terminals: 20
Number of non-terminals: 14
Number of states: 85
